ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              	sen1_on_line:
  21 0000 00       		.space	1
  22              	sen2_on_line:
  23 0001 00       		.space	1
  24              	sen3_on_line:
  25 0002 00       		.space	1
  26              	sen4_on_line:
  27 0003 00       		.space	1
  28              	sen5_on_line:
  29 0004 00       		.space	1
  30              	sen6_on_line:
  31 0005 00       		.space	1
  32              	g_direction:
  33 0006 00       		.space	1
  34              	g_stop_now:
  35 0007 00       		.space	1
  36              		.align	2
  37              	g_dist_mm:
  38 0008 00000000 		.space	4
  39              		.align	1
  40              	dir_delay_ticks:
  41 000c 0000     		.space	2
  42              	dir_latched_side:
  43 000e 00       		.space	1
  44 000f 00       		.align	1
  45              	turn_cooldown_ticks:
  46 0010 0000     		.space	2
  47              		.global	__aeabi_ldivmod
  48              		.section	.text.isr_qd_Handler,"ax",%progbits
  49              		.align	2
  50              		.global	isr_qd_Handler
  51              		.thumb
  52              		.thumb_func
  53              		.type	isr_qd_Handler, %function
  54              	isr_qd_Handler:
  55              	.LFB64:
  56              		.file 1 "main.c"
   1:main.c        **** /* ========================= main.c (with PI steering + turn-call delay) =========================
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 2


   2:main.c        ****  * - Keeps straight-line PI active during a short delay after g_direction flips (Option A)
   3:main.c        ****  * - Then calls Directions_Handle(&g_direction) to run the maneuver
   4:main.c        ****  * - Resets PI integrator after the turn completes
   5:main.c        ****  * ============================================================================================== *
   6:main.c        **** 
   7:main.c        **** #include <project.h>
   8:main.c        **** #include <stdint.h>
   9:main.c        **** #include <stdbool.h>
  10:main.c        **** 
  11:main.c        **** #include <sensors.h>     // Sensor_ComputePeakToPeak()
  12:main.c        **** #include "motor_s.h"     // set_motors_*, motor_enable
  13:main.c        **** #include "directions.h"  // Directions_* turning module
  14:main.c        **** 
  15:main.c        **** 
  16:main.c        **** /* ===== Loop pacing (kept) ===== */
  17:main.c        **** #define LOOP_DT_MS               8u
  18:main.c        **** #define DT_S   ( (float)LOOP_DT_MS / 1000.0f )
  19:main.c        **** 
  20:main.c        **** /* ===== Cruise speed / distance target (kept) ===== */
  21:main.c        **** #define VMAX_CONST_MM_S        1000
  22:main.c        **** #define SPEED_FRAC_PERCENT      20
  23:main.c        **** #define V_CRUISE_MM_S  ((int32_t)VMAX_CONST_MM_S * (int32_t)SPEED_FRAC_PERCENT / 100)
  24:main.c        **** #define TARGET_DIST_MM        150  // HALF THE DISTANCE   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  25:main.c        **** 
  26:main.c        **** /* ===== Encoder â†’ mm conversion (kept) ===== */
  27:main.c        **** #define QD_SAMPLE_MS             5u
  28:main.c        **** #define CPR_OUTSHAFT           228u
  29:main.c        **** #define R_MM                    34
  30:main.c        **** #define PI_X1000              3142
  31:main.c        **** #define PERIM_MM_X1000   ((int32_t)(2 * PI_X1000 * R_MM))
  32:main.c        **** #define MM_PER_COUNT_X1000     ( PERIM_MM_X1000 / CPR_OUTSHAFT )
  33:main.c        **** #define CALIB_DIST_X1000     1000   // Changed to 1000 to avoid scaling
  34:main.c        **** #define APPLY_CALIB_DIST(x)  ( (int32_t)(((int64_t)(x) * CALIB_DIST_X1000 + 500)/1000) )
  35:main.c        **** 
  36:main.c        **** /* ===== S1/S2 relaxed detection (kept) ===== */
  37:main.c        **** #define S_MINC_COUNTS            10
  38:main.c        **** #define S_MAXC_COUNTS           100
  39:main.c        **** #define S_HYST_COUNTS           16u
  40:main.c        **** 
  41:main.c        **** /* ===== Turn request filtering (kept) ===== */
  42:main.c        **** #define TURN_DEBOUNCE_TICKS       5u
  43:main.c        **** #define CLEAR_ARM_TICKS           4u
  44:main.c        **** 
  45:main.c        **** #define DIR_CALL_DELAY_MS        (100)  /* wait ~200 ms before starting the maneuver */
  46:main.c        **** #define DIR_CALL_DELAY_TICKS     ((DIR_CALL_DELAY_MS + LOOP_DT_MS - 1) / LOOP_DT_MS)
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** // Cooldown after turn to ignore intersection sensors V1 & V2
  50:main.c        **** #define TURN_COOLDOWN_MS (300)
  51:main.c        **** #define TURN_COOLDOWN_TICKS ((TURN_COOLDOWN_MS + LOOP_DT_MS - 1) / LOOP_DT_MS
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** /* ===== Local sensor flags (used for S1/S2 edge) ===== */
  56:main.c        **** static uint8_t sen1_on_line=0, sen2_on_line=0, sen3_on_line=0;
  57:main.c        **** static uint8_t sen4_on_line=0, sen5_on_line=0, sen6_on_line=0;
  58:main.c        **** 
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 3


  59:main.c        **** /* ===== Global state (kept) ===== */
  60:main.c        **** static volatile uint8_t g_direction = 0;   /* 0=straight, 1=left, 2=right */
  61:main.c        **** static volatile uint8_t g_stop_now  = 0;
  62:main.c        **** static volatile int32_t g_dist_mm   = 0;
  63:main.c        **** 
  64:main.c        **** /* ===== Option A state ===== */
  65:main.c        **** static uint16_t dir_delay_ticks = 0;        /* countdown in loop ticks */
  66:main.c        **** static uint8_t  dir_latched_side = 0;       /* remembers 1 or 2 while waiting */
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** static uint16_t turn_cooldown_ticks = 0;
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        **** /* ------------------------------- 5 ms Timer ISR: accumulate distance (kept) ---------------------
  73:main.c        **** CY_ISR(isr_qd_Handler)
  74:main.c        **** {
  57              		.loc 1 74 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 48
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  62              		.cfi_def_cfa_offset 36
  63              		.cfi_offset 4, -36
  64              		.cfi_offset 5, -32
  65              		.cfi_offset 6, -28
  66              		.cfi_offset 7, -24
  67              		.cfi_offset 8, -20
  68              		.cfi_offset 9, -16
  69              		.cfi_offset 10, -12
  70              		.cfi_offset 11, -8
  71              		.cfi_offset 14, -4
  72 0004 8DB0     		sub	sp, sp, #52
  73              		.cfi_def_cfa_offset 88
  74 0006 00AF     		add	r7, sp, #0
  75              		.cfi_def_cfa_register 7
  75:main.c        ****     if (g_direction == 0u) {  // Only accumulate distance when moving straight
  76              		.loc 1 75 0
  77 0008 404B     		ldr	r3, .L7
  78 000a 1B78     		ldrb	r3, [r3]
  79 000c DBB2     		uxtb	r3, r3
  80 000e 002B     		cmp	r3, #0
  81 0010 74D1     		bne	.L2
  82              	.LBB2:
  76:main.c        ****         int32_t raw1 = QuadDec_M1_GetCounter();  QuadDec_M1_SetCounter(0);
  83              		.loc 1 76 0
  84 0012 FFF7FEFF 		bl	QuadDec_M1_GetCounter
  85 0016 0346     		mov	r3, r0
  86 0018 FB62     		str	r3, [r7, #44]
  87 001a 0020     		movs	r0, #0
  88 001c FFF7FEFF 		bl	QuadDec_M1_SetCounter
  77:main.c        ****         int32_t raw2 = QuadDec_M2_GetCounter();  QuadDec_M2_SetCounter(0);
  89              		.loc 1 77 0
  90 0020 FFF7FEFF 		bl	QuadDec_M2_GetCounter
  91 0024 0346     		mov	r3, r0
  92 0026 BB62     		str	r3, [r7, #40]
  93 0028 0020     		movs	r0, #0
  94 002a FFF7FEFF 		bl	QuadDec_M2_SetCounter
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 4


  78:main.c        **** 
  79:main.c        ****         int32_t d1 = raw1, d2 = raw2;
  95              		.loc 1 79 0
  96 002e FB6A     		ldr	r3, [r7, #44]
  97 0030 7B62     		str	r3, [r7, #36]
  98 0032 BB6A     		ldr	r3, [r7, #40]
  99 0034 3B62     		str	r3, [r7, #32]
  80:main.c        ****         int32_t a1 = (d1 >= 0) ? d1 : -d1;
 100              		.loc 1 80 0
 101 0036 7B6A     		ldr	r3, [r7, #36]
 102 0038 002B     		cmp	r3, #0
 103 003a B8BF     		it	lt
 104 003c 5B42     		rsblt	r3, r3, #0
 105 003e FB61     		str	r3, [r7, #28]
  81:main.c        ****         int32_t a2 = (d2 >= 0) ? d2 : -d2;
 106              		.loc 1 81 0
 107 0040 3B6A     		ldr	r3, [r7, #32]
 108 0042 002B     		cmp	r3, #0
 109 0044 B8BF     		it	lt
 110 0046 5B42     		rsblt	r3, r3, #0
 111 0048 BB61     		str	r3, [r7, #24]
  82:main.c        ****         int32_t davg_abs = (a1 + a2) / 2;
 112              		.loc 1 82 0
 113 004a FA69     		ldr	r2, [r7, #28]
 114 004c BB69     		ldr	r3, [r7, #24]
 115 004e 1344     		add	r3, r3, r2
 116 0050 DA0F     		lsrs	r2, r3, #31
 117 0052 1344     		add	r3, r3, r2
 118 0054 5B10     		asrs	r3, r3, #1
 119 0056 7B61     		str	r3, [r7, #20]
  83:main.c        ****         int32_t davg_sign = ((d1 + d2) >= 0) ? +1 : -1;
 120              		.loc 1 83 0
 121 0058 7A6A     		ldr	r2, [r7, #36]
 122 005a 3B6A     		ldr	r3, [r7, #32]
 123 005c 1344     		add	r3, r3, r2
 124 005e 002B     		cmp	r3, #0
 125 0060 01DB     		blt	.L3
 126              		.loc 1 83 0 is_stmt 0 discriminator 1
 127 0062 0123     		movs	r3, #1
 128 0064 01E0     		b	.L4
 129              	.L3:
 130              		.loc 1 83 0 discriminator 2
 131 0066 4FF0FF33 		mov	r3, #-1
 132              	.L4:
 133              		.loc 1 83 0 discriminator 4
 134 006a 3B61     		str	r3, [r7, #16]
  84:main.c        **** 
  85:main.c        ****         // Calculate the distance moved
  86:main.c        ****         int64_t num = (int64_t)(davg_abs) * MM_PER_COUNT_X1000;  // Calculate mm from encoder count
 135              		.loc 1 86 0 is_stmt 1 discriminator 4
 136 006c 7B69     		ldr	r3, [r7, #20]
 137 006e 1946     		mov	r1, r3
 138 0070 4FEAE172 		asr	r2, r1, #31
 139 0074 0B46     		mov	r3, r1
 140 0076 1446     		mov	r4, r2
 141 0078 DB18     		adds	r3, r3, r3
 142 007a 44EB0404 		adc	r4, r4, r4
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 5


 143 007e 5B18     		adds	r3, r3, r1
 144 0080 44EB0204 		adc	r4, r4, r2
 145 0084 4FEA840B 		lsl	fp, r4, #2
 146 0088 4BEA937B 		orr	fp, fp, r3, lsr #30
 147 008c 4FEA830A 		lsl	r10, r3, #2
 148 0090 5346     		mov	r3, r10
 149 0092 5C46     		mov	r4, fp
 150 0094 5B18     		adds	r3, r3, r1
 151 0096 44EB0204 		adc	r4, r4, r2
 152 009a E600     		lsls	r6, r4, #3
 153 009c 46EA5376 		orr	r6, r6, r3, lsr #29
 154 00a0 DD00     		lsls	r5, r3, #3
 155 00a2 5B19     		adds	r3, r3, r5
 156 00a4 44EB0604 		adc	r4, r4, r6
 157 00a8 4FEAC409 		lsl	r9, r4, #3
 158 00ac 49EA5379 		orr	r9, r9, r3, lsr #29
 159 00b0 4FEAC308 		lsl	r8, r3, #3
 160 00b4 4346     		mov	r3, r8
 161 00b6 4C46     		mov	r4, r9
 162 00b8 5B18     		adds	r3, r3, r1
 163 00ba 44EB0204 		adc	r4, r4, r2
 164 00be C7E90234 		strd	r3, [r7, #8]
  87:main.c        ****         int32_t dmm_abs = (int32_t)((num + 500) / 1000);          // Round to nearest mm
 165              		.loc 1 87 0 discriminator 4
 166 00c2 D7E90234 		ldrd	r3, [r7, #8]
 167 00c6 13F5FA70 		adds	r0, r3, #500
 168 00ca 44F10001 		adc	r1, r4, #0
 169 00ce 4FF47A72 		mov	r2, #1000
 170 00d2 4FF00003 		mov	r3, #0
 171 00d6 FFF7FEFF 		bl	__aeabi_ldivmod
 172 00da 0346     		mov	r3, r0
 173 00dc 0C46     		mov	r4, r1
 174 00de 7B60     		str	r3, [r7, #4]
  88:main.c        ****         int32_t dmm_signed = (davg_sign >= 0) ? +dmm_abs : -dmm_abs;
 175              		.loc 1 88 0 discriminator 4
 176 00e0 3B69     		ldr	r3, [r7, #16]
 177 00e2 002B     		cmp	r3, #0
 178 00e4 02DA     		bge	.L5
 179              		.loc 1 88 0 is_stmt 0 discriminator 1
 180 00e6 7B68     		ldr	r3, [r7, #4]
 181 00e8 5B42     		negs	r3, r3
 182 00ea 00E0     		b	.L6
 183              	.L5:
 184              		.loc 1 88 0 discriminator 2
 185 00ec 7B68     		ldr	r3, [r7, #4]
 186              	.L6:
 187              		.loc 1 88 0 discriminator 4
 188 00ee 3B60     		str	r3, [r7]
  89:main.c        **** 
  90:main.c        ****         // Update the global distance traveled
  91:main.c        ****         g_dist_mm += dmm_signed;
 189              		.loc 1 91 0 is_stmt 1 discriminator 4
 190 00f0 074B     		ldr	r3, .L7+4
 191 00f2 1A68     		ldr	r2, [r3]
 192 00f4 3B68     		ldr	r3, [r7]
 193 00f6 1344     		add	r3, r3, r2
 194 00f8 054A     		ldr	r2, .L7+4
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 6


 195 00fa 1360     		str	r3, [r2]
 196              	.L2:
 197              	.LBE2:
  92:main.c        **** 
  93:main.c        ****         // Optionally add small smoothing for distance (comment this out if you don't want smoothin
  94:main.c        ****         // static int32_t v_mm = 0;
  95:main.c        ****         // v_mm = v_mm + ((dmm_signed - v_mm) >> 2); // ~alpha=0.25
  96:main.c        ****         // g_dist_mm += v_mm;
  97:main.c        ****     }
  98:main.c        **** 
  99:main.c        ****     (void)Timer_QD_ReadStatusRegister();  // Clear the interrupt flag
 198              		.loc 1 99 0
 199 00fc FFF7FEFF 		bl	Timer_QD_ReadStatusRegister
 100:main.c        **** }
 200              		.loc 1 100 0
 201 0100 00BF     		nop
 202 0102 3437     		adds	r7, r7, #52
 203              		.cfi_def_cfa_offset 36
 204 0104 BD46     		mov	sp, r7
 205              		.cfi_def_cfa_register 13
 206              		@ sp needed
 207 0106 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 208              	.L8:
 209 010a 00BF     		.align	2
 210              	.L7:
 211 010c 06000000 		.word	g_direction
 212 0110 08000000 		.word	g_dist_mm
 213              		.cfi_endproc
 214              	.LFE64:
 215              		.size	isr_qd_Handler, .-isr_qd_Handler
 216              		.global	__aeabi_i2f
 217              		.global	__aeabi_fdiv
 218              		.section	.text.norm01_from_pp,"ax",%progbits
 219              		.align	2
 220              		.thumb
 221              		.thumb_func
 222              		.type	norm01_from_pp, %function
 223              	norm01_from_pp:
 224              	.LFB65:
 101:main.c        **** 
 102:main.c        **** /* Utility: normalize peak-to-peak to [0..1] */
 103:main.c        **** static inline float norm01_from_pp(uint16_t pp)
 104:main.c        **** {
 225              		.loc 1 104 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229 0000 80B5     		push	{r7, lr}
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 82B0     		sub	sp, sp, #8
 234              		.cfi_def_cfa_offset 16
 235 0004 00AF     		add	r7, sp, #0
 236              		.cfi_def_cfa_register 7
 237 0006 0346     		mov	r3, r0
 238 0008 FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 7


 105:main.c        ****     if (pp <= S_MINC_COUNTS) return 0.0f;
 239              		.loc 1 105 0
 240 000a FB88     		ldrh	r3, [r7, #6]
 241 000c 0A2B     		cmp	r3, #10
 242 000e 02D8     		bhi	.L10
 243              		.loc 1 105 0 is_stmt 0 discriminator 1
 244 0010 4FF00003 		mov	r3, #0
 245 0014 10E0     		b	.L11
 246              	.L10:
 106:main.c        ****     if (pp >= S_MAXC_COUNTS) return 1.0f;
 247              		.loc 1 106 0 is_stmt 1
 248 0016 FB88     		ldrh	r3, [r7, #6]
 249 0018 632B     		cmp	r3, #99
 250 001a 02D9     		bls	.L12
 251              		.loc 1 106 0 is_stmt 0 discriminator 1
 252 001c 4FF07E53 		mov	r3, #1065353216
 253 0020 0AE0     		b	.L11
 254              	.L12:
 107:main.c        ****     return (float)(pp - S_MINC_COUNTS) / (float)(S_MAXC_COUNTS - S_MINC_COUNTS);
 255              		.loc 1 107 0 is_stmt 1
 256 0022 FB88     		ldrh	r3, [r7, #6]
 257 0024 0A3B     		subs	r3, r3, #10
 258 0026 1846     		mov	r0, r3
 259 0028 FFF7FEFF 		bl	__aeabi_i2f
 260 002c 0346     		mov	r3, r0
 261 002e 0449     		ldr	r1, .L13
 262 0030 1846     		mov	r0, r3
 263 0032 FFF7FEFF 		bl	__aeabi_fdiv
 264 0036 0346     		mov	r3, r0
 265              	.L11:
 108:main.c        **** }
 266              		.loc 1 108 0
 267 0038 1846     		mov	r0, r3
 268 003a 0837     		adds	r7, r7, #8
 269              		.cfi_def_cfa_offset 8
 270 003c BD46     		mov	sp, r7
 271              		.cfi_def_cfa_register 13
 272              		@ sp needed
 273 003e 80BD     		pop	{r7, pc}
 274              	.L14:
 275              		.align	2
 276              	.L13:
 277 0040 0000B442 		.word	1119092736
 278              		.cfi_endproc
 279              	.LFE65:
 280              		.size	norm01_from_pp, .-norm01_from_pp
 281              		.section	.text.light_sensors_update_and_maybe_request_turn,"ax",%progbits
 282              		.align	2
 283              		.thumb
 284              		.thumb_func
 285              		.type	light_sensors_update_and_maybe_request_turn, %function
 286              	light_sensors_update_and_maybe_request_turn:
 287              	.LFB66:
 109:main.c        **** 
 110:main.c        **** /* Read sensors and (maybe) request a turn based on S1 / S2 (kept) */
 111:main.c        **** static void light_sensors_update_and_maybe_request_turn(uint16_t* V4_pp, uint16_t* V5_pp, uint16_t*
 112:main.c        **** {
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 8


 288              		.loc 1 112 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 32
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292 0000 80B5     		push	{r7, lr}
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 7, -8
 295              		.cfi_offset 14, -4
 296 0002 88B0     		sub	sp, sp, #32
 297              		.cfi_def_cfa_offset 40
 298 0004 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
 300 0006 F860     		str	r0, [r7, #12]
 301 0008 B960     		str	r1, [r7, #8]
 302 000a 7A60     		str	r2, [r7, #4]
 113:main.c        ****     uint16_t V1 = Sensor_ComputePeakToPeak(0);
 303              		.loc 1 113 0
 304 000c 0020     		movs	r0, #0
 305 000e FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 306 0012 0346     		mov	r3, r0
 307 0014 FB83     		strh	r3, [r7, #30]	@ movhi
 114:main.c        ****     uint16_t V2 = Sensor_ComputePeakToPeak(1);
 308              		.loc 1 114 0
 309 0016 0120     		movs	r0, #1
 310 0018 FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 311 001c 0346     		mov	r3, r0
 312 001e BB83     		strh	r3, [r7, #28]	@ movhi
 115:main.c        ****     uint16_t V3 = Sensor_ComputePeakToPeak(2);
 313              		.loc 1 115 0
 314 0020 0220     		movs	r0, #2
 315 0022 FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 316 0026 0346     		mov	r3, r0
 317 0028 7B83     		strh	r3, [r7, #26]	@ movhi
 116:main.c        ****     uint16_t V4 = Sensor_ComputePeakToPeak(3);
 318              		.loc 1 116 0
 319 002a 0320     		movs	r0, #3
 320 002c FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 321 0030 0346     		mov	r3, r0
 322 0032 3B83     		strh	r3, [r7, #24]	@ movhi
 117:main.c        ****     uint16_t V5 = Sensor_ComputePeakToPeak(4);
 323              		.loc 1 117 0
 324 0034 0420     		movs	r0, #4
 325 0036 FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 326 003a 0346     		mov	r3, r0
 327 003c FB82     		strh	r3, [r7, #22]	@ movhi
 118:main.c        ****     uint16_t V6 = Sensor_ComputePeakToPeak(5);
 328              		.loc 1 118 0
 329 003e 0520     		movs	r0, #5
 330 0040 FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 331 0044 0346     		mov	r3, r0
 332 0046 BB82     		strh	r3, [r7, #20]	@ movhi
 119:main.c        **** 
 120:main.c        ****     if (V4_pp) *V4_pp = V4;
 333              		.loc 1 120 0
 334 0048 FB68     		ldr	r3, [r7, #12]
 335 004a 002B     		cmp	r3, #0
 336 004c 02D0     		beq	.L16
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 9


 337              		.loc 1 120 0 is_stmt 0 discriminator 1
 338 004e FB68     		ldr	r3, [r7, #12]
 339 0050 3A8B     		ldrh	r2, [r7, #24]	@ movhi
 340 0052 1A80     		strh	r2, [r3]	@ movhi
 341              	.L16:
 121:main.c        ****     if (V5_pp) *V5_pp = V5;
 342              		.loc 1 121 0 is_stmt 1
 343 0054 BB68     		ldr	r3, [r7, #8]
 344 0056 002B     		cmp	r3, #0
 345 0058 02D0     		beq	.L17
 346              		.loc 1 121 0 is_stmt 0 discriminator 1
 347 005a BB68     		ldr	r3, [r7, #8]
 348 005c FA8A     		ldrh	r2, [r7, #22]	@ movhi
 349 005e 1A80     		strh	r2, [r3]	@ movhi
 350              	.L17:
 122:main.c        ****     if (V6_pp) *V6_pp = V6;
 351              		.loc 1 122 0 is_stmt 1
 352 0060 7B68     		ldr	r3, [r7, #4]
 353 0062 002B     		cmp	r3, #0
 354 0064 02D0     		beq	.L18
 355              		.loc 1 122 0 is_stmt 0 discriminator 1
 356 0066 7B68     		ldr	r3, [r7, #4]
 357 0068 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 358 006a 1A80     		strh	r2, [r3]	@ movhi
 359              	.L18:
 123:main.c        ****     
 124:main.c        ****     sen1_on_line = (V1 > 10 && V1 < 100) ? 1u : 0u;
 360              		.loc 1 124 0 is_stmt 1
 361 006c FB8B     		ldrh	r3, [r7, #30]
 362 006e 0A2B     		cmp	r3, #10
 363 0070 04D9     		bls	.L19
 364              		.loc 1 124 0 is_stmt 0 discriminator 1
 365 0072 FB8B     		ldrh	r3, [r7, #30]
 366 0074 632B     		cmp	r3, #99
 367 0076 01D8     		bhi	.L19
 368              		.loc 1 124 0 discriminator 3
 369 0078 0122     		movs	r2, #1
 370 007a 00E0     		b	.L20
 371              	.L19:
 372              		.loc 1 124 0 discriminator 4
 373 007c 0022     		movs	r2, #0
 374              	.L20:
 375              		.loc 1 124 0 discriminator 6
 376 007e 2A4B     		ldr	r3, .L34
 377 0080 1A70     		strb	r2, [r3]
 125:main.c        ****     sen2_on_line = (V2 > 10 && V2 < 100) ? 1u : 0u;
 378              		.loc 1 125 0 is_stmt 1 discriminator 6
 379 0082 BB8B     		ldrh	r3, [r7, #28]
 380 0084 0A2B     		cmp	r3, #10
 381 0086 04D9     		bls	.L21
 382              		.loc 1 125 0 is_stmt 0 discriminator 1
 383 0088 BB8B     		ldrh	r3, [r7, #28]
 384 008a 632B     		cmp	r3, #99
 385 008c 01D8     		bhi	.L21
 386              		.loc 1 125 0 discriminator 3
 387 008e 0122     		movs	r2, #1
 388 0090 00E0     		b	.L22
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 10


 389              	.L21:
 390              		.loc 1 125 0 discriminator 4
 391 0092 0022     		movs	r2, #0
 392              	.L22:
 393              		.loc 1 125 0 discriminator 6
 394 0094 254B     		ldr	r3, .L34+4
 395 0096 1A70     		strb	r2, [r3]
 126:main.c        ****     sen3_on_line = (V3 > 10 && V3 < 100) ? 1u : 0u;
 396              		.loc 1 126 0 is_stmt 1 discriminator 6
 397 0098 7B8B     		ldrh	r3, [r7, #26]
 398 009a 0A2B     		cmp	r3, #10
 399 009c 04D9     		bls	.L23
 400              		.loc 1 126 0 is_stmt 0 discriminator 1
 401 009e 7B8B     		ldrh	r3, [r7, #26]
 402 00a0 632B     		cmp	r3, #99
 403 00a2 01D8     		bhi	.L23
 404              		.loc 1 126 0 discriminator 3
 405 00a4 0122     		movs	r2, #1
 406 00a6 00E0     		b	.L24
 407              	.L23:
 408              		.loc 1 126 0 discriminator 4
 409 00a8 0022     		movs	r2, #0
 410              	.L24:
 411              		.loc 1 126 0 discriminator 6
 412 00aa 214B     		ldr	r3, .L34+8
 413 00ac 1A70     		strb	r2, [r3]
 127:main.c        ****     sen4_on_line = (V4 > 10 && V4 < 100) ? 1u : 0u;
 414              		.loc 1 127 0 is_stmt 1 discriminator 6
 415 00ae 3B8B     		ldrh	r3, [r7, #24]
 416 00b0 0A2B     		cmp	r3, #10
 417 00b2 04D9     		bls	.L25
 418              		.loc 1 127 0 is_stmt 0 discriminator 1
 419 00b4 3B8B     		ldrh	r3, [r7, #24]
 420 00b6 632B     		cmp	r3, #99
 421 00b8 01D8     		bhi	.L25
 422              		.loc 1 127 0 discriminator 3
 423 00ba 0122     		movs	r2, #1
 424 00bc 00E0     		b	.L26
 425              	.L25:
 426              		.loc 1 127 0 discriminator 4
 427 00be 0022     		movs	r2, #0
 428              	.L26:
 429              		.loc 1 127 0 discriminator 6
 430 00c0 1C4B     		ldr	r3, .L34+12
 431 00c2 1A70     		strb	r2, [r3]
 128:main.c        ****     sen5_on_line = (V5 > 10 && V5 < 100) ? 1u : 0u;
 432              		.loc 1 128 0 is_stmt 1 discriminator 6
 433 00c4 FB8A     		ldrh	r3, [r7, #22]
 434 00c6 0A2B     		cmp	r3, #10
 435 00c8 04D9     		bls	.L27
 436              		.loc 1 128 0 is_stmt 0 discriminator 1
 437 00ca FB8A     		ldrh	r3, [r7, #22]
 438 00cc 632B     		cmp	r3, #99
 439 00ce 01D8     		bhi	.L27
 440              		.loc 1 128 0 discriminator 3
 441 00d0 0122     		movs	r2, #1
 442 00d2 00E0     		b	.L28
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 11


 443              	.L27:
 444              		.loc 1 128 0 discriminator 4
 445 00d4 0022     		movs	r2, #0
 446              	.L28:
 447              		.loc 1 128 0 discriminator 6
 448 00d6 184B     		ldr	r3, .L34+16
 449 00d8 1A70     		strb	r2, [r3]
 129:main.c        ****     sen6_on_line = (V6 > 10 && V6 < 100) ? 1u : 0u;
 450              		.loc 1 129 0 is_stmt 1 discriminator 6
 451 00da BB8A     		ldrh	r3, [r7, #20]
 452 00dc 0A2B     		cmp	r3, #10
 453 00de 04D9     		bls	.L29
 454              		.loc 1 129 0 is_stmt 0 discriminator 1
 455 00e0 BB8A     		ldrh	r3, [r7, #20]
 456 00e2 632B     		cmp	r3, #99
 457 00e4 01D8     		bhi	.L29
 458              		.loc 1 129 0 discriminator 3
 459 00e6 0122     		movs	r2, #1
 460 00e8 00E0     		b	.L30
 461              	.L29:
 462              		.loc 1 129 0 discriminator 4
 463 00ea 0022     		movs	r2, #0
 464              	.L30:
 465              		.loc 1 129 0 discriminator 6
 466 00ec 134B     		ldr	r3, .L34+20
 467 00ee 1A70     		strb	r2, [r3]
 130:main.c        **** 
 131:main.c        ****     if (g_direction == 0u && turn_cooldown_ticks == 0u){
 468              		.loc 1 131 0 is_stmt 1 discriminator 6
 469 00f0 134B     		ldr	r3, .L34+24
 470 00f2 1B78     		ldrb	r3, [r3]
 471 00f4 DBB2     		uxtb	r3, r3
 472 00f6 002B     		cmp	r3, #0
 473 00f8 12D1     		bne	.L33
 474              		.loc 1 131 0 is_stmt 0 discriminator 1
 475 00fa 124B     		ldr	r3, .L34+28
 476 00fc 1B88     		ldrh	r3, [r3]
 477 00fe 002B     		cmp	r3, #0
 478 0100 0ED1     		bne	.L33
 132:main.c        ****         if (sen1_on_line){
 479              		.loc 1 132 0 is_stmt 1
 480 0102 094B     		ldr	r3, .L34
 481 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 482 0106 002B     		cmp	r3, #0
 483 0108 03D0     		beq	.L32
 133:main.c        ****             g_direction = 1;  // LEFT turn
 484              		.loc 1 133 0
 485 010a 0D4B     		ldr	r3, .L34+24
 486 010c 0122     		movs	r2, #1
 487 010e 1A70     		strb	r2, [r3]
 134:main.c        ****         } else if (sen2_on_line){
 135:main.c        ****             g_direction = 2;  // RIGHT turn
 136:main.c        ****         }
 137:main.c        ****     }
 138:main.c        **** }
 488              		.loc 1 138 0
 489 0110 06E0     		b	.L33
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 12


 490              	.L32:
 134:main.c        ****         } else if (sen2_on_line){
 491              		.loc 1 134 0
 492 0112 064B     		ldr	r3, .L34+4
 493 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494 0116 002B     		cmp	r3, #0
 495 0118 02D0     		beq	.L33
 135:main.c        ****         }
 496              		.loc 1 135 0
 497 011a 094B     		ldr	r3, .L34+24
 498 011c 0222     		movs	r2, #2
 499 011e 1A70     		strb	r2, [r3]
 500              	.L33:
 501              		.loc 1 138 0
 502 0120 00BF     		nop
 503 0122 2037     		adds	r7, r7, #32
 504              		.cfi_def_cfa_offset 8
 505 0124 BD46     		mov	sp, r7
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 0126 80BD     		pop	{r7, pc}
 509              	.L35:
 510              		.align	2
 511              	.L34:
 512 0128 00000000 		.word	sen1_on_line
 513 012c 01000000 		.word	sen2_on_line
 514 0130 02000000 		.word	sen3_on_line
 515 0134 03000000 		.word	sen4_on_line
 516 0138 04000000 		.word	sen5_on_line
 517 013c 05000000 		.word	sen6_on_line
 518 0140 06000000 		.word	g_direction
 519 0144 10000000 		.word	turn_cooldown_ticks
 520              		.cfi_endproc
 521              	.LFE66:
 522              		.size	light_sensors_update_and_maybe_request_turn, .-light_sensors_update_and_maybe_request_turn
 523              		.global	__aeabi_fcmplt
 524              		.global	__aeabi_fcmpgt
 525              		.section	.text._clampf,"ax",%progbits
 526              		.align	2
 527              		.thumb
 528              		.thumb_func
 529              		.type	_clampf, %function
 530              	_clampf:
 531              	.LFB67:
 139:main.c        **** 
 140:main.c        **** /* ================= PI Controller (same as your current file) ================= */
 141:main.c        **** #define STEER_MAX        15
 142:main.c        **** #define KP               18.0f
 143:main.c        **** #define KI               2.0f
 144:main.c        **** #define INT_LIM          30.0f
 145:main.c        **** #define LOSS_TIMEOUT_T   0.25f
 146:main.c        **** 
 147:main.c        **** typedef struct { float i, u, t_loss; } pi_t;
 148:main.c        **** static inline float _clampf(float x, float lo, float hi){ return (x<lo?lo:(x>hi?hi:x)); }
 532              		.loc 1 148 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 13


 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536 0000 80B5     		push	{r7, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 7, -8
 539              		.cfi_offset 14, -4
 540 0002 84B0     		sub	sp, sp, #16
 541              		.cfi_def_cfa_offset 24
 542 0004 00AF     		add	r7, sp, #0
 543              		.cfi_def_cfa_register 7
 544 0006 F860     		str	r0, [r7, #12]	@ float
 545 0008 B960     		str	r1, [r7, #8]	@ float
 546 000a 7A60     		str	r2, [r7, #4]	@ float
 547              		.loc 1 148 0
 548 000c B968     		ldr	r1, [r7, #8]	@ float
 549 000e F868     		ldr	r0, [r7, #12]	@ float
 550 0010 FFF7FEFF 		bl	__aeabi_fcmplt
 551 0014 0346     		mov	r3, r0
 552 0016 002B     		cmp	r3, #0
 553 0018 01D0     		beq	.L46
 554              		.loc 1 148 0 is_stmt 0 discriminator 1
 555 001a BB68     		ldr	r3, [r7, #8]	@ float
 556 001c 09E0     		b	.L43
 557              	.L46:
 558              		.loc 1 148 0 discriminator 2
 559 001e 7968     		ldr	r1, [r7, #4]	@ float
 560 0020 F868     		ldr	r0, [r7, #12]	@ float
 561 0022 FFF7FEFF 		bl	__aeabi_fcmpgt
 562 0026 0346     		mov	r3, r0
 563 0028 002B     		cmp	r3, #0
 564 002a 01D0     		beq	.L47
 565              		.loc 1 148 0 discriminator 4
 566 002c 7B68     		ldr	r3, [r7, #4]	@ float
 567 002e 00E0     		b	.L43
 568              	.L47:
 569              		.loc 1 148 0 discriminator 5
 570 0030 FB68     		ldr	r3, [r7, #12]	@ float
 571              	.L43:
 572              		.loc 1 148 0 discriminator 9
 573 0032 1846     		mov	r0, r3
 574 0034 1037     		adds	r7, r7, #16
 575              		.cfi_def_cfa_offset 8
 576 0036 BD46     		mov	sp, r7
 577              		.cfi_def_cfa_register 13
 578              		@ sp needed
 579 0038 80BD     		pop	{r7, pc}
 580              		.cfi_endproc
 581              	.LFE67:
 582              		.size	_clampf, .-_clampf
 583              		.global	__aeabi_fmul
 584              		.global	__aeabi_fadd
 585              		.global	__aeabi_fsub
 586              		.global	__aeabi_fcmpge
 587              		.global	__aeabi_f2iz
 588              		.global	__aeabi_fcmple
 589 003a 00BF     		.section	.text.pi_step,"ax",%progbits
 590              		.align	2
 591              		.thumb
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 14


 592              		.thumb_func
 593              		.type	pi_step, %function
 594              	pi_step:
 595              	.LFB68:
 149:main.c        **** 
 150:main.c        **** static int pi_step(pi_t* pi, uint16_t V4_pp, uint16_t V5_pp, uint16_t V6_pp)
 151:main.c        **** {
 596              		.loc 1 151 0 is_stmt 1
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 64
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600 0000 90B5     		push	{r4, r7, lr}
 601              		.cfi_def_cfa_offset 12
 602              		.cfi_offset 4, -12
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 0002 91B0     		sub	sp, sp, #68
 606              		.cfi_def_cfa_offset 80
 607 0004 00AF     		add	r7, sp, #0
 608              		.cfi_def_cfa_register 7
 609 0006 F860     		str	r0, [r7, #12]
 610 0008 0846     		mov	r0, r1
 611 000a 1146     		mov	r1, r2
 612 000c 1A46     		mov	r2, r3
 613 000e 0346     		mov	r3, r0	@ movhi
 614 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 615 0012 0B46     		mov	r3, r1	@ movhi
 616 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 617 0016 1346     		mov	r3, r2	@ movhi
 618 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 152:main.c        ****     float c4 = norm01_from_pp(V4_pp)*1.5f;
 619              		.loc 1 152 0
 620 001a 7B89     		ldrh	r3, [r7, #10]
 621 001c 1846     		mov	r0, r3
 622 001e FFF7FEFF 		bl	norm01_from_pp
 623 0022 0346     		mov	r3, r0
 624 0024 4FF07F51 		mov	r1, #1069547520
 625 0028 1846     		mov	r0, r3
 626 002a FFF7FEFF 		bl	__aeabi_fmul
 627 002e 0346     		mov	r3, r0
 628 0030 BB63     		str	r3, [r7, #56]	@ float
 153:main.c        ****     float c5 = norm01_from_pp(V5_pp)*1.5f;
 629              		.loc 1 153 0
 630 0032 3B89     		ldrh	r3, [r7, #8]
 631 0034 1846     		mov	r0, r3
 632 0036 FFF7FEFF 		bl	norm01_from_pp
 633 003a 0346     		mov	r3, r0
 634 003c 4FF07F51 		mov	r1, #1069547520
 635 0040 1846     		mov	r0, r3
 636 0042 FFF7FEFF 		bl	__aeabi_fmul
 637 0046 0346     		mov	r3, r0
 638 0048 7B63     		str	r3, [r7, #52]	@ float
 154:main.c        ****     float c6 = norm01_from_pp(V6_pp)*1.5f;
 639              		.loc 1 154 0
 640 004a FB88     		ldrh	r3, [r7, #6]
 641 004c 1846     		mov	r0, r3
 642 004e FFF7FEFF 		bl	norm01_from_pp
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 15


 643 0052 0346     		mov	r3, r0
 644 0054 4FF07F51 		mov	r1, #1069547520
 645 0058 1846     		mov	r0, r3
 646 005a FFF7FEFF 		bl	__aeabi_fmul
 647 005e 0346     		mov	r3, r0
 648 0060 3B63     		str	r3, [r7, #48]	@ float
 155:main.c        ****     float sum = c4 + c5 + c6;
 649              		.loc 1 155 0
 650 0062 796B     		ldr	r1, [r7, #52]	@ float
 651 0064 B86B     		ldr	r0, [r7, #56]	@ float
 652 0066 FFF7FEFF 		bl	__aeabi_fadd
 653 006a 0346     		mov	r3, r0
 654 006c 396B     		ldr	r1, [r7, #48]	@ float
 655 006e 1846     		mov	r0, r3
 656 0070 FFF7FEFF 		bl	__aeabi_fadd
 657 0074 0346     		mov	r3, r0
 658 0076 FB62     		str	r3, [r7, #44]	@ float
 156:main.c        ****     bool valid = (sum > 0.08f);
 659              		.loc 1 156 0
 660 0078 0123     		movs	r3, #1
 661 007a 1C46     		mov	r4, r3
 662 007c 7849     		ldr	r1, .L68
 663 007e F86A     		ldr	r0, [r7, #44]	@ float
 664 0080 FFF7FEFF 		bl	__aeabi_fcmpgt
 665 0084 0346     		mov	r3, r0
 666 0086 002B     		cmp	r3, #0
 667 0088 01D1     		bne	.L49
 668 008a 0023     		movs	r3, #0
 669 008c 1C46     		mov	r4, r3
 670              	.L49:
 671 008e 87F82B40 		strb	r4, [r7, #43]
 157:main.c        **** 
 158:main.c        ****     float pos = 0.0f;
 672              		.loc 1 158 0
 673 0092 4FF00003 		mov	r3, #0
 674 0096 FB63     		str	r3, [r7, #60]	@ float
 159:main.c        ****     if (valid) pos = (-1.0f * c4 + 0.0f * c5 + 1.0f * c6) / sum;
 675              		.loc 1 159 0
 676 0098 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 677 009c 002B     		cmp	r3, #0
 678 009e 15D0     		beq	.L50
 679              		.loc 1 159 0 is_stmt 0 discriminator 1
 680 00a0 4FF00001 		mov	r1, #0
 681 00a4 786B     		ldr	r0, [r7, #52]	@ float
 682 00a6 FFF7FEFF 		bl	__aeabi_fmul
 683 00aa 0346     		mov	r3, r0
 684 00ac B96B     		ldr	r1, [r7, #56]	@ float
 685 00ae 1846     		mov	r0, r3
 686 00b0 FFF7FEFF 		bl	__aeabi_fsub
 687 00b4 0346     		mov	r3, r0
 688 00b6 396B     		ldr	r1, [r7, #48]	@ float
 689 00b8 1846     		mov	r0, r3
 690 00ba FFF7FEFF 		bl	__aeabi_fadd
 691 00be 0346     		mov	r3, r0
 692 00c0 F96A     		ldr	r1, [r7, #44]	@ float
 693 00c2 1846     		mov	r0, r3
 694 00c4 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 16


 695 00c8 0346     		mov	r3, r0
 696 00ca FB63     		str	r3, [r7, #60]	@ float
 697              	.L50:
 160:main.c        **** 
 161:main.c        ****     float e = pos;
 698              		.loc 1 161 0 is_stmt 1
 699 00cc FB6B     		ldr	r3, [r7, #60]	@ float
 700 00ce 7B62     		str	r3, [r7, #36]	@ float
 162:main.c        **** 
 163:main.c        ****     if (!valid) {
 701              		.loc 1 163 0
 702 00d0 97F82B30 		ldrb	r3, [r7, #43]
 703 00d4 83F00103 		eor	r3, r3, #1
 704 00d8 DBB2     		uxtb	r3, r3
 705 00da 002B     		cmp	r3, #0
 706 00dc 2AD0     		beq	.L51
 164:main.c        ****         pi->t_loss += DT_S;
 707              		.loc 1 164 0
 708 00de FB68     		ldr	r3, [r7, #12]
 709 00e0 9B68     		ldr	r3, [r3, #8]	@ float
 710 00e2 6049     		ldr	r1, .L68+4
 711 00e4 1846     		mov	r0, r3
 712 00e6 FFF7FEFF 		bl	__aeabi_fadd
 713 00ea 0346     		mov	r3, r0
 714 00ec 1A46     		mov	r2, r3
 715 00ee FB68     		ldr	r3, [r7, #12]
 716 00f0 9A60     		str	r2, [r3, #8]	@ float
 165:main.c        ****         if (pi->t_loss >= LOSS_TIMEOUT_T) pi->i *= 0.92f;
 717              		.loc 1 165 0
 718 00f2 FB68     		ldr	r3, [r7, #12]
 719 00f4 9B68     		ldr	r3, [r3, #8]	@ float
 720 00f6 4FF07A51 		mov	r1, #1048576000
 721 00fa 1846     		mov	r0, r3
 722 00fc FFF7FEFF 		bl	__aeabi_fcmpge
 723 0100 0346     		mov	r3, r0
 724 0102 002B     		cmp	r3, #0
 725 0104 09D0     		beq	.L52
 726              		.loc 1 165 0 is_stmt 0 discriminator 1
 727 0106 FB68     		ldr	r3, [r7, #12]
 728 0108 1B68     		ldr	r3, [r3]	@ float
 729 010a 5749     		ldr	r1, .L68+8
 730 010c 1846     		mov	r0, r3
 731 010e FFF7FEFF 		bl	__aeabi_fmul
 732 0112 0346     		mov	r3, r0
 733 0114 1A46     		mov	r2, r3
 734 0116 FB68     		ldr	r3, [r7, #12]
 735 0118 1A60     		str	r2, [r3]	@ float
 736              	.L52:
 166:main.c        ****         return (int)_clampf(pi->u, -(float)STEER_MAX, (float)STEER_MAX);
 737              		.loc 1 166 0 is_stmt 1
 738 011a FB68     		ldr	r3, [r7, #12]
 739 011c 5B68     		ldr	r3, [r3, #4]	@ float
 740 011e 534A     		ldr	r2, .L68+12
 741 0120 5349     		ldr	r1, .L68+16
 742 0122 1846     		mov	r0, r3
 743 0124 FFF7FEFF 		bl	_clampf
 744 0128 0346     		mov	r3, r0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 17


 745 012a 1846     		mov	r0, r3
 746 012c FFF7FEFF 		bl	__aeabi_f2iz
 747 0130 0346     		mov	r3, r0
 748 0132 91E0     		b	.L54
 749              	.L51:
 167:main.c        ****     }
 168:main.c        ****     pi->t_loss = 0.0f;
 750              		.loc 1 168 0
 751 0134 FB68     		ldr	r3, [r7, #12]
 752 0136 4FF00002 		mov	r2, #0
 753 013a 9A60     		str	r2, [r3, #8]	@ float
 169:main.c        **** 
 170:main.c        ****     float i_next = _clampf(pi->i + e * DT_S, -INT_LIM, +INT_LIM);
 754              		.loc 1 170 0
 755 013c FB68     		ldr	r3, [r7, #12]
 756 013e 1C68     		ldr	r4, [r3]	@ float
 757 0140 4849     		ldr	r1, .L68+4
 758 0142 786A     		ldr	r0, [r7, #36]	@ float
 759 0144 FFF7FEFF 		bl	__aeabi_fmul
 760 0148 0346     		mov	r3, r0
 761 014a 1946     		mov	r1, r3
 762 014c 2046     		mov	r0, r4
 763 014e FFF7FEFF 		bl	__aeabi_fadd
 764 0152 0346     		mov	r3, r0
 765 0154 474A     		ldr	r2, .L68+20
 766 0156 4849     		ldr	r1, .L68+24
 767 0158 1846     		mov	r0, r3
 768 015a FFF7FEFF 		bl	_clampf
 769 015e 3862     		str	r0, [r7, #32]	@ float
 171:main.c        ****     float u_raw  = KP * e + KI * i_next;
 770              		.loc 1 171 0
 771 0160 4649     		ldr	r1, .L68+28
 772 0162 786A     		ldr	r0, [r7, #36]	@ float
 773 0164 FFF7FEFF 		bl	__aeabi_fmul
 774 0168 0346     		mov	r3, r0
 775 016a 1C46     		mov	r4, r3
 776 016c 3B6A     		ldr	r3, [r7, #32]	@ float
 777 016e 1946     		mov	r1, r3
 778 0170 1846     		mov	r0, r3
 779 0172 FFF7FEFF 		bl	__aeabi_fadd
 780 0176 0346     		mov	r3, r0
 781 0178 1946     		mov	r1, r3
 782 017a 2046     		mov	r0, r4
 783 017c FFF7FEFF 		bl	__aeabi_fadd
 784 0180 0346     		mov	r3, r0
 785 0182 FB61     		str	r3, [r7, #28]	@ float
 172:main.c        ****     float u      = _clampf(u_raw, -(float)STEER_MAX, (float)STEER_MAX);
 786              		.loc 1 172 0
 787 0184 394A     		ldr	r2, .L68+12
 788 0186 3A49     		ldr	r1, .L68+16
 789 0188 F869     		ldr	r0, [r7, #28]	@ float
 790 018a FFF7FEFF 		bl	_clampf
 791 018e B861     		str	r0, [r7, #24]	@ float
 173:main.c        **** 
 174:main.c        ****     bool sat_hi = (u >=  (float)STEER_MAX - 1e-3f);
 792              		.loc 1 174 0
 793 0190 0123     		movs	r3, #1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 18


 794 0192 1C46     		mov	r4, r3
 795 0194 3A49     		ldr	r1, .L68+32
 796 0196 B869     		ldr	r0, [r7, #24]	@ float
 797 0198 FFF7FEFF 		bl	__aeabi_fcmpge
 798 019c 0346     		mov	r3, r0
 799 019e 002B     		cmp	r3, #0
 800 01a0 01D1     		bne	.L55
 801 01a2 0023     		movs	r3, #0
 802 01a4 1C46     		mov	r4, r3
 803              	.L55:
 804 01a6 FC75     		strb	r4, [r7, #23]
 175:main.c        ****     bool sat_lo = (u <= -(float)STEER_MAX + 1e-3f);
 805              		.loc 1 175 0
 806 01a8 0123     		movs	r3, #1
 807 01aa 1C46     		mov	r4, r3
 808 01ac 3549     		ldr	r1, .L68+36
 809 01ae B869     		ldr	r0, [r7, #24]	@ float
 810 01b0 FFF7FEFF 		bl	__aeabi_fcmple
 811 01b4 0346     		mov	r3, r0
 812 01b6 002B     		cmp	r3, #0
 813 01b8 01D1     		bne	.L56
 814 01ba 0023     		movs	r3, #0
 815 01bc 1C46     		mov	r4, r3
 816              	.L56:
 817 01be BC75     		strb	r4, [r7, #22]
 176:main.c        **** 
 177:main.c        ****     if ((sat_hi && (KI * i_next > KI * pi->i)) ||
 818              		.loc 1 177 0
 819 01c0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 820 01c2 002B     		cmp	r3, #0
 821 01c4 14D0     		beq	.L57
 822              		.loc 1 177 0 is_stmt 0 discriminator 1
 823 01c6 3B6A     		ldr	r3, [r7, #32]	@ float
 824 01c8 1946     		mov	r1, r3
 825 01ca 1846     		mov	r0, r3
 826 01cc FFF7FEFF 		bl	__aeabi_fadd
 827 01d0 0346     		mov	r3, r0
 828 01d2 1C46     		mov	r4, r3
 829 01d4 FB68     		ldr	r3, [r7, #12]
 830 01d6 1B68     		ldr	r3, [r3]	@ float
 831 01d8 1946     		mov	r1, r3
 832 01da 1846     		mov	r0, r3
 833 01dc FFF7FEFF 		bl	__aeabi_fadd
 834 01e0 0346     		mov	r3, r0
 835 01e2 1946     		mov	r1, r3
 836 01e4 2046     		mov	r0, r4
 837 01e6 FFF7FEFF 		bl	__aeabi_fcmpgt
 838 01ea 0346     		mov	r3, r0
 839 01ec 002B     		cmp	r3, #0
 840 01ee 1AD1     		bne	.L59
 841              	.L57:
 842              		.loc 1 177 0 discriminator 3
 843 01f0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 844 01f2 002B     		cmp	r3, #0
 845 01f4 14D0     		beq	.L60
 178:main.c        ****         (sat_lo && (KI * i_next < KI * pi->i))) {
 846              		.loc 1 178 0 is_stmt 1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 19


 847 01f6 3B6A     		ldr	r3, [r7, #32]	@ float
 848 01f8 1946     		mov	r1, r3
 849 01fa 1846     		mov	r0, r3
 850 01fc FFF7FEFF 		bl	__aeabi_fadd
 851 0200 0346     		mov	r3, r0
 852 0202 1C46     		mov	r4, r3
 853 0204 FB68     		ldr	r3, [r7, #12]
 854 0206 1B68     		ldr	r3, [r3]	@ float
 855 0208 1946     		mov	r1, r3
 856 020a 1846     		mov	r0, r3
 857 020c FFF7FEFF 		bl	__aeabi_fadd
 858 0210 0346     		mov	r3, r0
 859 0212 1946     		mov	r1, r3
 860 0214 2046     		mov	r0, r4
 861 0216 FFF7FEFF 		bl	__aeabi_fcmplt
 862 021a 0346     		mov	r3, r0
 863 021c 002B     		cmp	r3, #0
 864 021e 02D1     		bne	.L59
 865              	.L60:
 179:main.c        ****         /* donâ€™t integrate further into saturation */
 180:main.c        ****     } else {
 181:main.c        ****         pi->i = i_next;
 866              		.loc 1 181 0
 867 0220 FB68     		ldr	r3, [r7, #12]
 868 0222 3A6A     		ldr	r2, [r7, #32]	@ float
 869 0224 1A60     		str	r2, [r3]	@ float
 870              	.L59:
 182:main.c        ****     }
 183:main.c        **** 
 184:main.c        ****     pi->u = u;
 871              		.loc 1 184 0
 872 0226 FB68     		ldr	r3, [r7, #12]
 873 0228 BA69     		ldr	r2, [r7, #24]	@ float
 874 022a 5A60     		str	r2, [r3, #4]	@ float
 185:main.c        ****     return (int)(u + (u>=0?0.5f:-0.5f));
 875              		.loc 1 185 0
 876 022c 4FF00001 		mov	r1, #0
 877 0230 B869     		ldr	r0, [r7, #24]	@ float
 878 0232 FFF7FEFF 		bl	__aeabi_fcmpge
 879 0236 0346     		mov	r3, r0
 880 0238 002B     		cmp	r3, #0
 881 023a 02D0     		beq	.L67
 882              		.loc 1 185 0 is_stmt 0 discriminator 1
 883 023c 4FF07C53 		mov	r3, #1056964608
 884 0240 01E0     		b	.L64
 885              	.L67:
 886              		.loc 1 185 0 discriminator 2
 887 0242 4FF03F43 		mov	r3, #-1090519040
 888              	.L64:
 889              		.loc 1 185 0 discriminator 4
 890 0246 B969     		ldr	r1, [r7, #24]	@ float
 891 0248 1846     		mov	r0, r3
 892 024a FFF7FEFF 		bl	__aeabi_fadd
 893 024e 0346     		mov	r3, r0
 894 0250 1846     		mov	r0, r3
 895 0252 FFF7FEFF 		bl	__aeabi_f2iz
 896 0256 0346     		mov	r3, r0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 20


 897              	.L54:
 186:main.c        **** }
 898              		.loc 1 186 0 is_stmt 1
 899 0258 1846     		mov	r0, r3
 900 025a 4437     		adds	r7, r7, #68
 901              		.cfi_def_cfa_offset 12
 902 025c BD46     		mov	sp, r7
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 025e 90BD     		pop	{r4, r7, pc}
 906              	.L69:
 907              		.align	2
 908              	.L68:
 909 0260 0AD7A33D 		.word	1034147594
 910 0264 6F12033C 		.word	1006834287
 911 0268 1F856B3F 		.word	1064011039
 912 026c 00007041 		.word	1097859072
 913 0270 000070C1 		.word	-1049624576
 914 0274 0000F041 		.word	1106247680
 915 0278 0000F0C1 		.word	-1041235968
 916 027c 00009041 		.word	1099956224
 917 0280 E7FB6F41 		.word	1097858023
 918 0284 E7FB6FC1 		.word	-1049625625
 919              		.cfi_endproc
 920              	.LFE68:
 921              		.size	pi_step, .-pi_step
 922              		.section	.rodata
 923              		.align	2
 924              	.LC0:
 925 0000 00       		.byte	0
 926 0001 02       		.byte	2
 927 0002 02       		.byte	2
 928 0003 01       		.byte	1
 929 0004 02       		.byte	2
 930 0005 02       		.byte	2
 931 0006 00       		.byte	0
 932 0007 03       		.byte	3
 933 0008 02       		.byte	2
 934 0009 01       		.byte	1
 935 000a 02       		.byte	2
 936 000b 01       		.byte	1
 937 000c 00       		.byte	0
 938 000d 03       		.byte	3
 939 000e 02       		.byte	2
 940 000f 02       		.byte	2
 941 0010 01       		.byte	1
 942 0011 00       		.byte	0
 943 0012 03       		.byte	3
 944 0013 02       		.byte	2
 945 0014 01       		.byte	1
 946 0015 01       		.byte	1
 947 0016 01       		.byte	1
 948 0017 00       		.byte	0
 949 0018 01       		.byte	1
 950 0019 02       		.byte	2
 951 001a 02       		.byte	2
 952 001b 01       		.byte	1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 21


 953 001c 02       		.byte	2
 954 001d 01       		.byte	1
 955 001e 00       		.byte	0
 956              		.section	.text.main,"ax",%progbits
 957              		.align	2
 958              		.global	main
 959              		.thumb
 960              		.thumb_func
 961              		.type	main, %function
 962              	main:
 963              	.LFB69:
 187:main.c        **** 
 188:main.c        **** int main(void)
 189:main.c        **** {
 964              		.loc 1 189 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 88
 967              		@ frame_needed = 1, uses_anonymous_args = 0
 968 0000 B0B5     		push	{r4, r5, r7, lr}
 969              		.cfi_def_cfa_offset 16
 970              		.cfi_offset 4, -16
 971              		.cfi_offset 5, -12
 972              		.cfi_offset 7, -8
 973              		.cfi_offset 14, -4
 974 0002 96B0     		sub	sp, sp, #88
 975              		.cfi_def_cfa_offset 104
 976 0004 00AF     		add	r7, sp, #0
 977              		.cfi_def_cfa_register 7
 190:main.c        ****     motor_enable(1u, 1u);
 978              		.loc 1 190 0
 979 0006 0121     		movs	r1, #1
 980 0008 0120     		movs	r0, #1
 981 000a FFF7FEFF 		bl	motor_enable
 191:main.c        ****     CyGlobalIntEnable;
 982              		.loc 1 191 0
 983              		.syntax unified
 984              	@ 191 "main.c" 1
 985 000e 62B6     		CPSIE   i
 986              	@ 0 "" 2
 192:main.c        **** 
 193:main.c        ****     /* ADC for sensors */
 194:main.c        ****     ADC_Start();
 987              		.loc 1 194 0
 988              		.thumb
 989              		.syntax unified
 990 0010 FFF7FEFF 		bl	ADC_Start
 195:main.c        ****     CyDelay(10);
 991              		.loc 1 195 0
 992 0014 0A20     		movs	r0, #10
 993 0016 FFF7FEFF 		bl	CyDelay
 196:main.c        **** 
 197:main.c        ****     /* Encoders + 5 ms tick (distance only) */
 198:main.c        ****     Clock_QENC_Start();
 994              		.loc 1 198 0
 995 001a FFF7FEFF 		bl	Clock_QENC_Start
 199:main.c        ****     QuadDec_M1_Start(); QuadDec_M2_Start();
 996              		.loc 1 199 0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 22


 997 001e FFF7FEFF 		bl	QuadDec_M1_Start
 998 0022 FFF7FEFF 		bl	QuadDec_M2_Start
 200:main.c        ****     QuadDec_M1_SetCounter(0); QuadDec_M2_SetCounter(0);
 999              		.loc 1 200 0
 1000 0026 0020     		movs	r0, #0
 1001 0028 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 1002 002c 0020     		movs	r0, #0
 1003 002e FFF7FEFF 		bl	QuadDec_M2_SetCounter
 201:main.c        ****     Clock_QD_Start();
 1004              		.loc 1 201 0
 1005 0032 FFF7FEFF 		bl	Clock_QD_Start
 202:main.c        ****     Timer_QD_Start();  // 5 ms period in TopDesign
 1006              		.loc 1 202 0
 1007 0036 FFF7FEFF 		bl	Timer_QD_Start
 203:main.c        ****     isr_qd_StartEx(isr_qd_Handler);
 1008              		.loc 1 203 0
 1009 003a 9848     		ldr	r0, .L120
 1010 003c FFF7FEFF 		bl	isr_qd_StartEx
 204:main.c        **** 
 205:main.c        ****     /* PWM & motor driver */
 206:main.c        ****     Clock_PWM_Start();
 1011              		.loc 1 206 0
 1012 0040 FFF7FEFF 		bl	Clock_PWM_Start
 207:main.c        ****     PWM_1_Start(); PWM_2_Start();
 1013              		.loc 1 207 0
 1014 0044 FFF7FEFF 		bl	PWM_1_Start
 1015 0048 FFF7FEFF 		bl	PWM_2_Start
 208:main.c        ****     PWM_1_WritePeriod(PWM_PERIOD);
 1016              		.loc 1 208 0
 1017 004c C820     		movs	r0, #200
 1018 004e FFF7FEFF 		bl	PWM_1_WritePeriod
 209:main.c        ****     PWM_2_WritePeriod(PWM_PERIOD);
 1019              		.loc 1 209 0
 1020 0052 C820     		movs	r0, #200
 1021 0054 FFF7FEFF 		bl	PWM_2_WritePeriod
 210:main.c        ****     set_motors_symmetric(0);
 1022              		.loc 1 210 0
 1023 0058 0020     		movs	r0, #0
 1024 005a FFF7FEFF 		bl	set_motors_symmetric
 211:main.c        ****     motor_enable(0u, 0u);
 1025              		.loc 1 211 0
 1026 005e 0021     		movs	r1, #0
 1027 0060 0020     		movs	r0, #0
 1028 0062 FFF7FEFF 		bl	motor_enable
 212:main.c        **** 
 213:main.c        ****     /* Directions module */
 214:main.c        ****     Directions_Init();
 1029              		.loc 1 214 0
 1030 0066 FFF7FEFF 		bl	Directions_Init
 215:main.c        ****     g_direction = 0u;
 1031              		.loc 1 215 0
 1032 006a 8D4B     		ldr	r3, .L120+4
 1033 006c 0022     		movs	r2, #0
 1034 006e 1A70     		strb	r2, [r3]
 216:main.c        **** 
 217:main.c        ****     /* Feed-forward cruise duty (kept) */
 218:main.c        ****     int center_duty_est = (int)((V_CRUISE_MM_S * 100) / VMAX_CONST_MM_S);
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 23


 1035              		.loc 1 218 0
 1036 0070 1423     		movs	r3, #20
 1037 0072 7B65     		str	r3, [r7, #84]
 219:main.c        ****     if (center_duty_est < 0) center_duty_est = 0;
 1038              		.loc 1 219 0
 1039 0074 7B6D     		ldr	r3, [r7, #84]
 1040 0076 002B     		cmp	r3, #0
 1041 0078 01DA     		bge	.L71
 1042              		.loc 1 219 0 is_stmt 0 discriminator 1
 1043 007a 0023     		movs	r3, #0
 1044 007c 7B65     		str	r3, [r7, #84]
 1045              	.L71:
 220:main.c        ****     if (center_duty_est > 100) center_duty_est = 100;
 1046              		.loc 1 220 0 is_stmt 1
 1047 007e 7B6D     		ldr	r3, [r7, #84]
 1048 0080 642B     		cmp	r3, #100
 1049 0082 01DD     		ble	.L72
 1050              		.loc 1 220 0 is_stmt 0 discriminator 1
 1051 0084 6423     		movs	r3, #100
 1052 0086 7B65     		str	r3, [r7, #84]
 1053              	.L72:
 221:main.c        **** 
 222:main.c        ****     /* PI state */
 223:main.c        ****     pi_t pi = { .i = 0.0f, .u = 0.0f, .t_loss = 0.0f };
 1054              		.loc 1 223 0 is_stmt 1
 1055 0088 4FF00003 		mov	r3, #0
 1056 008c FB62     		str	r3, [r7, #44]	@ float
 1057 008e 4FF00003 		mov	r3, #0
 1058 0092 3B63     		str	r3, [r7, #48]	@ float
 1059 0094 4FF00003 		mov	r3, #0
 1060 0098 7B63     		str	r3, [r7, #52]	@ float
 224:main.c        ****     
 225:main.c        ****     CyDelay(1000);  // So the motors don't jump
 1061              		.loc 1 225 0
 1062 009a 4FF47A70 		mov	r0, #1000
 1063 009e FFF7FEFF 		bl	CyDelay
 226:main.c        ****     set_motors_with_trim_and_steer(100,-10);
 1064              		.loc 1 226 0
 1065 00a2 6FF00901 		mvn	r1, #9
 1066 00a6 6420     		movs	r0, #100
 1067 00a8 FFF7FEFF 		bl	set_motors_with_trim_and_steer
 227:main.c        ****     CyDelay(40);
 1068              		.loc 1 227 0
 1069 00ac 2820     		movs	r0, #40
 1070 00ae FFF7FEFF 		bl	CyDelay
 228:main.c        ****     set_motors_symmetric(0); 
 1071              		.loc 1 228 0
 1072 00b2 0020     		movs	r0, #0
 1073 00b4 FFF7FEFF 		bl	set_motors_symmetric
 229:main.c        ****     
 230:main.c        ****     
 231:main.c        ****     // Pathfinding array
 232:main.c        ****     /* 
 233:main.c        ****      * STRAIGHT -> 0, TURN LEFT -> 1, TURN RIGHT -> 2, TURN U_TURN -> 3,
 234:main.c        ****      * REACH -> 5, END -> 6
 235:main.c        ****      */
 236:main.c        ****     
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 24


 237:main.c        **** const uint8_t CMD_STATES[] = {
 1074              		.loc 1 237 0
 1075 00b8 7A4B     		ldr	r3, .L120+8
 1076 00ba 07F10C04 		add	r4, r7, #12
 1077 00be 1D46     		mov	r5, r3
 1078 00c0 2868     		ldr	r0, [r5]	@ unaligned
 1079 00c2 6968     		ldr	r1, [r5, #4]	@ unaligned
 1080 00c4 AA68     		ldr	r2, [r5, #8]	@ unaligned
 1081 00c6 EB68     		ldr	r3, [r5, #12]	@ unaligned
 1082 00c8 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1083 00ca 2869     		ldr	r0, [r5, #16]	@ unaligned
 1084 00cc 6969     		ldr	r1, [r5, #20]	@ unaligned
 1085 00ce AA69     		ldr	r2, [r5, #24]	@ unaligned
 1086 00d0 07C4     		stmia	r4!, {r0, r1, r2}
 1087 00d2 AB8B     		ldrh	r3, [r5, #28]	@ unaligned
 1088 00d4 AA7F     		ldrb	r2, [r5, #30]
 1089 00d6 2380     		strh	r3, [r4]	@ unaligned
 1090 00d8 1346     		mov	r3, r2
 1091 00da A370     		strb	r3, [r4, #2]
 238:main.c        ****     // 31 entries, aligned 1:1 with COMMANDS[i]
 239:main.c        ****     0, // START
 240:main.c        ****     2, // RIGHT
 241:main.c        ****     2, // RIGHT
 242:main.c        ****     1, // LEFT
 243:main.c        ****     2, // RIGHT
 244:main.c        ****     2, // RIGHT
 245:main.c        ****     0,// 5, // REACH
 246:main.c        ****     3, // UTURN
 247:main.c        ****     2, // RIGHT
 248:main.c        ****     1, // LEFT
 249:main.c        ****     2, // RIGHT
 250:main.c        ****     1, // LEFT
 251:main.c        ****     0,// 5, // REACH
 252:main.c        ****     3, // UTURN
 253:main.c        ****     2, // RIGHT
 254:main.c        ****     2, // RIGHT
 255:main.c        ****     1, // LEFT
 256:main.c        ****     0,// 5, // REACH
 257:main.c        ****     3, // UTURN
 258:main.c        ****     2, // RIGHT
 259:main.c        ****     1, // LEFT
 260:main.c        ****     1, // LEFT
 261:main.c        ****     1, // LEFT
 262:main.c        ****     0,// 5, // REACH
 263:main.c        ****     1, // LEFT
 264:main.c        ****     2, // RIGHT
 265:main.c        ****     2, // RIGHT
 266:main.c        ****     1, // LEFT
 267:main.c        ****     2, // RIGHT
 268:main.c        ****     1, // LEFT
 269:main.c        ****     0// 6  // END
 270:main.c        **** }; 
 271:main.c        ****     int8_t indexMAX = 31;  // Loop index
 1092              		.loc 1 271 0
 1093 00dc 1F23     		movs	r3, #31
 1094 00de 87F84730 		strb	r3, [r7, #71]
 272:main.c        ****     
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 25


 273:main.c        ****     // For Testing
 274:main.c        ****     //const uint8_t CMD_STATES[] = {1,2};
 275:main.c        ****     //int8_t indexMAX = 1;  // Loop index
 276:main.c        ****     
 277:main.c        ****     
 278:main.c        ****     int8_t i = 0;  // Loop index
 1095              		.loc 1 278 0
 1096 00e2 0023     		movs	r3, #0
 1097 00e4 87F85330 		strb	r3, [r7, #83]
 279:main.c        ****     int32_t target_dist = 0;
 1098              		.loc 1 279 0
 1099 00e8 0023     		movs	r3, #0
 1100 00ea FB64     		str	r3, [r7, #76]
 280:main.c        ****     
 281:main.c        ****     int8_t straight_complete = 0;
 1101              		.loc 1 281 0
 1102 00ec 0023     		movs	r3, #0
 1103 00ee 87F84B30 		strb	r3, [r7, #75]
 282:main.c        ****     int8_t turn_complete = 0;
 1104              		.loc 1 282 0
 1105 00f2 0023     		movs	r3, #0
 1106 00f4 87F84A30 		strb	r3, [r7, #74]
 283:main.c        ****     int8_t uTurn_complete = 0;
 1107              		.loc 1 283 0
 1108 00f8 0023     		movs	r3, #0
 1109 00fa 87F84930 		strb	r3, [r7, #73]
 284:main.c        ****     int8_t fruit_complete = 0;
 1110              		.loc 1 284 0
 1111 00fe 0023     		movs	r3, #0
 1112 0100 87F84830 		strb	r3, [r7, #72]
 1113              	.L119:
 1114              	.LBB3:
 285:main.c        **** 
 286:main.c        ****     for(;;){
 287:main.c        ****         
 288:main.c        ****         // This check will make the robot stay stopped
 289:main.c        ****         // once the path is complete.
 290:main.c        ****         if (g_stop_now) {
 1115              		.loc 1 290 0
 1116 0104 684B     		ldr	r3, .L120+12
 1117 0106 1B78     		ldrb	r3, [r3]
 1118 0108 DBB2     		uxtb	r3, r3
 1119 010a 002B     		cmp	r3, #0
 1120 010c 07D0     		beq	.L73
 291:main.c        ****             set_motors_symmetric(0);
 1121              		.loc 1 291 0
 1122 010e 0020     		movs	r0, #0
 1123 0110 FFF7FEFF 		bl	set_motors_symmetric
 292:main.c        ****             motor_enable(1u, 1u);
 1124              		.loc 1 292 0
 1125 0114 0121     		movs	r1, #1
 1126 0116 0120     		movs	r0, #1
 1127 0118 FFF7FEFF 		bl	motor_enable
 293:main.c        ****             continue;
 1128              		.loc 1 293 0
 1129 011c 39E2     		b	.L118
 1130              	.L73:
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 26


 294:main.c        ****         }
 295:main.c        **** 
 296:main.c        ****         /* Read sensors + maybe request turn */
 297:main.c        ****         uint16_t V4_pp=0, V5_pp=0, V6_pp=0;
 1131              		.loc 1 297 0
 1132 011e 0023     		movs	r3, #0
 1133 0120 7B81     		strh	r3, [r7, #10]	@ movhi
 1134 0122 0023     		movs	r3, #0
 1135 0124 3B81     		strh	r3, [r7, #8]	@ movhi
 1136 0126 0023     		movs	r3, #0
 1137 0128 FB80     		strh	r3, [r7, #6]	@ movhi
 298:main.c        ****         light_sensors_update_and_maybe_request_turn(&V4_pp, &V5_pp, &V6_pp);
 1138              		.loc 1 298 0
 1139 012a BA1D     		adds	r2, r7, #6
 1140 012c 07F10801 		add	r1, r7, #8
 1141 0130 07F10A03 		add	r3, r7, #10
 1142 0134 1846     		mov	r0, r3
 1143 0136 FFF7FEFF 		bl	light_sensors_update_and_maybe_request_turn
 299:main.c        ****         
 300:main.c        **** 
 301:main.c        **** //        /* ---------------- Turn handling with arming delay (Option A) ---------------- */
 302:main.c        **** //        /* Arm once on the first detection (edge 0 -> 1/2) */
 303:main.c        **** //        if ((g_direction == 1u || g_direction == 2u) && dir_latched_side == 0){
 304:main.c        **** //            dir_latched_side = g_direction;          /* remember side */
 305:main.c        **** //            dir_delay_ticks  = DIR_CALL_DELAY_TICKS; /* start countdown */
 306:main.c        **** //            //CyDelay(50);
 307:main.c        **** //        }
 308:main.c        **** //        /* If request cleared during delay, cancel gracefully */
 309:main.c        **** //        if (g_direction == 0u && dir_latched_side != 0){
 310:main.c        **** //            dir_latched_side = 0;
 311:main.c        **** //            dir_delay_ticks  = 0;
 312:main.c        **** //        }
 313:main.c        **** //
 314:main.c        **** //        if (g_direction == 1u || g_direction == 2u){
 315:main.c        **** //            if (dir_delay_ticks > 0){
 316:main.c        **** //                /* Still delaying: keep doing normal straight PI */
 317:main.c        **** //                dir_delay_ticks--;
 318:main.c        **** //            } else {
 319:main.c        **** //                /* Delay elapsed: perform the maneuver */
 320:main.c        **** //                Directions_Handle(&g_direction);
 321:main.c        **** //
 322:main.c        **** //                /* When turn completes, Directions sets g_direction back to 0 */
 323:main.c        **** //                if (g_direction == 0u){
 324:main.c        **** //                    pi.i = 0.0f; pi.u = 0.0f; pi.t_loss = 0.0f;  /* clear bias */
 325:main.c        **** //                    dir_latched_side = 0;                        /* ready next time */
 326:main.c        **** //                    
 327:main.c        **** //                    
 328:main.c        **** //                    turn_cooldown_ticks = TURN_COOLDOWN_TICKS);
 329:main.c        **** //                }
 330:main.c        **** //                CyDelay(LOOP_DT_MS);
 331:main.c        **** //                continue;  /* skip the rest this tick */
 332:main.c        **** //            }
 333:main.c        **** //        }
 334:main.c        **** //        /* ---------------- end turn handling with delay ---------------- */
 335:main.c        **** //
 336:main.c        **** //        /* Straight run with PI steering */
 337:main.c        **** //        
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 27


 338:main.c        **** //        if(turn_cooldown_ticks > 0) {
 339:main.c        **** //            turn_cooldown_ticks--;
 340:main.c        **** //        }
 341:main.c        **** //        
 342:main.c        **** //        /*
 343:main.c        **** //        // Add bias when back right sensor is under line
 344:main.c        **** //        uint16_t V5 = Sensor_ComputePeakToPeak(4);
 345:main.c        **** //        sen5_on_line = (V5 > 10 && V5 < 100) ? 1u : 0u;
 346:main.c        **** //        if (sen5_on_line == 1) {
 347:main.c        **** //            Motors_SetPercent(0,25);
 348:main.c        **** //            //set_motors_with_trim_and_steer(50,50); 
 349:main.c        **** //            CyDelay(10);
 350:main.c        **** //        } */
 351:main.c        ****         
 352:main.c        ****         
 353:main.c        **** //        int steer = pi_step(&pi, V4_pp, V5_pp, V6_pp);
 354:main.c        **** //        set_motors_with_trim_and_steer(center_duty_est, steer);
 355:main.c        **** //        
 356:main.c        **** //        
 357:main.c        **** //        /* Distance stop */    // g_dist_mm = total distance traveled
 358:main.c        **** //        g_stop_now = (g_dist_mm >= TARGET_DIST_MM) ? 1u : 0u;
 359:main.c        **** //        if (g_stop_now) {
 360:main.c        **** //            set_motors_symmetric(0);
 361:main.c        **** //            motor_enable(1u, 1u);
 362:main.c        **** //            g_direction = 0u;
 363:main.c        **** //            continue;
 364:main.c        **** //        }
 365:main.c        ****         
 366:main.c        ****         
 367:main.c        ****         
 368:main.c        ****         
 369:main.c        ****         /* Straight run with PI steering */        
 370:main.c        ****         if(turn_cooldown_ticks > 0) {
 1144              		.loc 1 370 0
 1145 013a 5C4B     		ldr	r3, .L120+16
 1146 013c 1B88     		ldrh	r3, [r3]
 1147 013e 002B     		cmp	r3, #0
 1148 0140 05D0     		beq	.L75
 371:main.c        ****             turn_cooldown_ticks--;
 1149              		.loc 1 371 0
 1150 0142 5A4B     		ldr	r3, .L120+16
 1151 0144 1B88     		ldrh	r3, [r3]
 1152 0146 013B     		subs	r3, r3, #1
 1153 0148 9AB2     		uxth	r2, r3
 1154 014a 584B     		ldr	r3, .L120+16
 1155 014c 1A80     		strh	r2, [r3]	@ movhi
 1156              	.L75:
 372:main.c        ****        }
 373:main.c        ****         
 374:main.c        ****         
 375:main.c        ****         // PATHFINDING ALGORITHM
 376:main.c        ****         
 377:main.c        ****         if (CMD_STATES[i] == 0) {
 1157              		.loc 1 377 0
 1158 014e 97F95330 		ldrsb	r3, [r7, #83]
 1159 0152 07F15802 		add	r2, r7, #88
 1160 0156 1344     		add	r3, r3, r2
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 28


 1161 0158 13F84C3C 		ldrb	r3, [r3, #-76]	@ zero_extendqisi2
 1162 015c 002B     		cmp	r3, #0
 1163 015e 38D1     		bne	.L76
 1164              	.LBB4:
 378:main.c        ****             // Go STRAIGHT
 379:main.c        ****             int steer = pi_step(&pi, V4_pp, V5_pp, V6_pp);
 1165              		.loc 1 379 0
 1166 0160 7989     		ldrh	r1, [r7, #10]
 1167 0162 3A89     		ldrh	r2, [r7, #8]
 1168 0164 FB88     		ldrh	r3, [r7, #6]
 1169 0166 07F12C00 		add	r0, r7, #44
 1170 016a FFF7FEFF 		bl	pi_step
 1171 016e 3864     		str	r0, [r7, #64]
 380:main.c        ****             set_motors_with_trim_and_steer(center_duty_est, steer);
 1172              		.loc 1 380 0
 1173 0170 396C     		ldr	r1, [r7, #64]
 1174 0172 786D     		ldr	r0, [r7, #84]
 1175 0174 FFF7FEFF 		bl	set_motors_with_trim_and_steer
 381:main.c        ****             
 382:main.c        ****             uint16_t V1 = Sensor_ComputePeakToPeak(0);
 1176              		.loc 1 382 0
 1177 0178 0020     		movs	r0, #0
 1178 017a FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 1179 017e 0346     		mov	r3, r0
 1180 0180 FB87     		strh	r3, [r7, #62]	@ movhi
 383:main.c        ****             sen1_on_line = (V1 > 10 && V1 < 100) ? 1u : 0u;
 1181              		.loc 1 383 0
 1182 0182 FB8F     		ldrh	r3, [r7, #62]
 1183 0184 0A2B     		cmp	r3, #10
 1184 0186 04D9     		bls	.L77
 1185              		.loc 1 383 0 is_stmt 0 discriminator 1
 1186 0188 FB8F     		ldrh	r3, [r7, #62]
 1187 018a 632B     		cmp	r3, #99
 1188 018c 01D8     		bhi	.L77
 1189              		.loc 1 383 0 discriminator 3
 1190 018e 0122     		movs	r2, #1
 1191 0190 00E0     		b	.L78
 1192              	.L77:
 1193              		.loc 1 383 0 discriminator 4
 1194 0192 0022     		movs	r2, #0
 1195              	.L78:
 1196              		.loc 1 383 0 discriminator 6
 1197 0194 464B     		ldr	r3, .L120+20
 1198 0196 1A70     		strb	r2, [r3]
 384:main.c        ****             uint16_t V2 = Sensor_ComputePeakToPeak(1);
 1199              		.loc 1 384 0 is_stmt 1 discriminator 6
 1200 0198 0120     		movs	r0, #1
 1201 019a FFF7FEFF 		bl	Sensor_ComputePeakToPeak
 1202 019e 0346     		mov	r3, r0
 1203 01a0 BB87     		strh	r3, [r7, #60]	@ movhi
 385:main.c        ****             sen2_on_line = (V2 > 10 && V2 < 100) ? 1u : 0u;
 1204              		.loc 1 385 0 discriminator 6
 1205 01a2 BB8F     		ldrh	r3, [r7, #60]
 1206 01a4 0A2B     		cmp	r3, #10
 1207 01a6 04D9     		bls	.L79
 1208              		.loc 1 385 0 is_stmt 0 discriminator 1
 1209 01a8 BB8F     		ldrh	r3, [r7, #60]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 29


 1210 01aa 632B     		cmp	r3, #99
 1211 01ac 01D8     		bhi	.L79
 1212              		.loc 1 385 0 discriminator 3
 1213 01ae 0122     		movs	r2, #1
 1214 01b0 00E0     		b	.L80
 1215              	.L79:
 1216              		.loc 1 385 0 discriminator 4
 1217 01b2 0022     		movs	r2, #0
 1218              	.L80:
 1219              		.loc 1 385 0 discriminator 6
 1220 01b4 3F4B     		ldr	r3, .L120+24
 1221 01b6 1A70     		strb	r2, [r3]
 386:main.c        ****             if (sen1_on_line == 1u || sen2_on_line == 1u) {
 1222              		.loc 1 386 0 is_stmt 1 discriminator 6
 1223 01b8 3D4B     		ldr	r3, .L120+20
 1224 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1225 01bc 012B     		cmp	r3, #1
 1226 01be 04D0     		beq	.L81
 1227              		.loc 1 386 0 is_stmt 0 discriminator 1
 1228 01c0 3C4B     		ldr	r3, .L120+24
 1229 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1230 01c4 012B     		cmp	r3, #1
 1231 01c6 40F0B381 		bne	.L83
 1232              	.L81:
 387:main.c        ****                 straight_complete = 1;
 1233              		.loc 1 387 0 is_stmt 1
 1234 01ca 0123     		movs	r3, #1
 1235 01cc 87F84B30 		strb	r3, [r7, #75]
 1236 01d0 AEE1     		b	.L83
 1237              	.L76:
 1238              	.LBE4:
 388:main.c        ****             }
 389:main.c        ****             
 390:main.c        ****         } else if((CMD_STATES[i] == 1)) {
 1239              		.loc 1 390 0
 1240 01d2 97F95330 		ldrsb	r3, [r7, #83]
 1241 01d6 07F15802 		add	r2, r7, #88
 1242 01da 1344     		add	r3, r3, r2
 1243 01dc 13F84C3C 		ldrb	r3, [r3, #-76]	@ zero_extendqisi2
 1244 01e0 012B     		cmp	r3, #1
 1245 01e2 6DD1     		bne	.L84
 391:main.c        ****             // Go LEFT
 392:main.c        ****             
 393:main.c        ****             g_direction = 1u;
 1246              		.loc 1 393 0
 1247 01e4 2E4B     		ldr	r3, .L120+4
 1248 01e6 0122     		movs	r2, #1
 1249 01e8 1A70     		strb	r2, [r3]
 394:main.c        ****             /* ---------------- Turn handling with arming delay (Option A) ---------------- */
 395:main.c        ****                 /* Arm once on the first detection (edge 0 -> 1/2) */
 396:main.c        ****                 if ((g_direction == 1u || g_direction == 2u) && dir_latched_side == 0){
 1250              		.loc 1 396 0
 1251 01ea 2D4B     		ldr	r3, .L120+4
 1252 01ec 1B78     		ldrb	r3, [r3]
 1253 01ee DBB2     		uxtb	r3, r3
 1254 01f0 012B     		cmp	r3, #1
 1255 01f2 04D0     		beq	.L85
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 30


 1256              		.loc 1 396 0 is_stmt 0 discriminator 2
 1257 01f4 2A4B     		ldr	r3, .L120+4
 1258 01f6 1B78     		ldrb	r3, [r3]
 1259 01f8 DBB2     		uxtb	r3, r3
 1260 01fa 022B     		cmp	r3, #2
 1261 01fc 0BD1     		bne	.L86
 1262              	.L85:
 1263              		.loc 1 396 0 discriminator 3
 1264 01fe 2E4B     		ldr	r3, .L120+28
 1265 0200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1266 0202 002B     		cmp	r3, #0
 1267 0204 07D1     		bne	.L86
 397:main.c        ****                     dir_latched_side = g_direction;          /* remember side */
 1268              		.loc 1 397 0 is_stmt 1
 1269 0206 264B     		ldr	r3, .L120+4
 1270 0208 1B78     		ldrb	r3, [r3]
 1271 020a DAB2     		uxtb	r2, r3
 1272 020c 2A4B     		ldr	r3, .L120+28
 1273 020e 1A70     		strb	r2, [r3]
 398:main.c        ****                     dir_delay_ticks  = DIR_CALL_DELAY_TICKS; /* start countdown */
 1274              		.loc 1 398 0
 1275 0210 2A4B     		ldr	r3, .L120+32
 1276 0212 0D22     		movs	r2, #13
 1277 0214 1A80     		strh	r2, [r3]	@ movhi
 1278              	.L86:
 399:main.c        ****                     //CyDelay(50);
 400:main.c        ****                 }
 401:main.c        ****                 /* If request cleared during delay, cancel gracefully */
 402:main.c        ****                 if (g_direction == 0u && dir_latched_side != 0){
 1279              		.loc 1 402 0
 1280 0216 224B     		ldr	r3, .L120+4
 1281 0218 1B78     		ldrb	r3, [r3]
 1282 021a DBB2     		uxtb	r3, r3
 1283 021c 002B     		cmp	r3, #0
 1284 021e 09D1     		bne	.L87
 1285              		.loc 1 402 0 is_stmt 0 discriminator 1
 1286 0220 254B     		ldr	r3, .L120+28
 1287 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1288 0224 002B     		cmp	r3, #0
 1289 0226 05D0     		beq	.L87
 403:main.c        ****                     dir_latched_side = 0;
 1290              		.loc 1 403 0 is_stmt 1
 1291 0228 234B     		ldr	r3, .L120+28
 1292 022a 0022     		movs	r2, #0
 1293 022c 1A70     		strb	r2, [r3]
 404:main.c        ****                     dir_delay_ticks  = 0;
 1294              		.loc 1 404 0
 1295 022e 234B     		ldr	r3, .L120+32
 1296 0230 0022     		movs	r2, #0
 1297 0232 1A80     		strh	r2, [r3]	@ movhi
 1298              	.L87:
 405:main.c        ****                 }
 406:main.c        **** 
 407:main.c        ****                 if (g_direction == 1u || g_direction == 2u){
 1299              		.loc 1 407 0
 1300 0234 1A4B     		ldr	r3, .L120+4
 1301 0236 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 31


 1302 0238 DBB2     		uxtb	r3, r3
 1303 023a 012B     		cmp	r3, #1
 1304 023c 05D0     		beq	.L88
 1305              		.loc 1 407 0 is_stmt 0 discriminator 1
 1306 023e 184B     		ldr	r3, .L120+4
 1307 0240 1B78     		ldrb	r3, [r3]
 1308 0242 DBB2     		uxtb	r3, r3
 1309 0244 022B     		cmp	r3, #2
 1310 0246 40F07381 		bne	.L83
 1311              	.L88:
 408:main.c        ****                     if (dir_delay_ticks > 0){
 1312              		.loc 1 408 0 is_stmt 1
 1313 024a 1C4B     		ldr	r3, .L120+32
 1314 024c 1B88     		ldrh	r3, [r3]
 1315 024e 002B     		cmp	r3, #0
 1316 0250 06D0     		beq	.L89
 409:main.c        ****                         /* Still delaying: keep doing normal straight PI */
 410:main.c        ****                         dir_delay_ticks--;
 1317              		.loc 1 410 0
 1318 0252 1A4B     		ldr	r3, .L120+32
 1319 0254 1B88     		ldrh	r3, [r3]
 1320 0256 013B     		subs	r3, r3, #1
 1321 0258 9AB2     		uxth	r2, r3
 1322 025a 184B     		ldr	r3, .L120+32
 1323 025c 1A80     		strh	r2, [r3]	@ movhi
 1324 025e 67E1     		b	.L83
 1325              	.L89:
 411:main.c        ****                     } else {
 412:main.c        ****                         /* Delay elapsed: perform the maneuver */
 413:main.c        ****                         Directions_Handle(&g_direction);
 1326              		.loc 1 413 0
 1327 0260 0F48     		ldr	r0, .L120+4
 1328 0262 FFF7FEFF 		bl	Directions_Handle
 414:main.c        **** 
 415:main.c        ****                         /* When turn completes, Directions sets g_direction back to 0 */
 416:main.c        ****                         if (g_direction == 0u){
 1329              		.loc 1 416 0
 1330 0266 0E4B     		ldr	r3, .L120+4
 1331 0268 1B78     		ldrb	r3, [r3]
 1332 026a DBB2     		uxtb	r3, r3
 1333 026c 002B     		cmp	r3, #0
 1334 026e 11D1     		bne	.L90
 417:main.c        ****                             pi.i = 0.0f; pi.u = 0.0f; pi.t_loss = 0.0f;  /* clear bias */
 1335              		.loc 1 417 0
 1336 0270 4FF00003 		mov	r3, #0
 1337 0274 FB62     		str	r3, [r7, #44]	@ float
 1338 0276 4FF00003 		mov	r3, #0
 1339 027a 3B63     		str	r3, [r7, #48]	@ float
 1340 027c 4FF00003 		mov	r3, #0
 1341 0280 7B63     		str	r3, [r7, #52]	@ float
 418:main.c        ****                             dir_latched_side = 0;                        /* ready next time */
 1342              		.loc 1 418 0
 1343 0282 0D4B     		ldr	r3, .L120+28
 1344 0284 0022     		movs	r2, #0
 1345 0286 1A70     		strb	r2, [r3]
 419:main.c        ****                             
 420:main.c        ****                             
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 32


 421:main.c        ****                             turn_cooldown_ticks = TURN_COOLDOWN_TICKS);
 1346              		.loc 1 421 0
 1347 0288 084B     		ldr	r3, .L120+16
 1348 028a 2622     		movs	r2, #38
 1349 028c 1A80     		strh	r2, [r3]	@ movhi
 422:main.c        ****                             turn_complete = 1;
 1350              		.loc 1 422 0
 1351 028e 0123     		movs	r3, #1
 1352 0290 87F84A30 		strb	r3, [r7, #74]
 1353              	.L90:
 423:main.c        ****                         }
 424:main.c        ****                         CyDelay(LOOP_DT_MS);
 1354              		.loc 1 424 0
 1355 0294 0820     		movs	r0, #8
 1356 0296 FFF7FEFF 		bl	CyDelay
 425:main.c        ****                         continue;  /* skip the rest this tick */
 1357              		.loc 1 425 0
 1358 029a 7AE1     		b	.L118
 1359              	.L121:
 1360              		.align	2
 1361              	.L120:
 1362 029c 00000000 		.word	isr_qd_Handler
 1363 02a0 06000000 		.word	g_direction
 1364 02a4 00000000 		.word	.LC0
 1365 02a8 07000000 		.word	g_stop_now
 1366 02ac 10000000 		.word	turn_cooldown_ticks
 1367 02b0 00000000 		.word	sen1_on_line
 1368 02b4 01000000 		.word	sen2_on_line
 1369 02b8 0E000000 		.word	dir_latched_side
 1370 02bc 0C000000 		.word	dir_delay_ticks
 1371              	.L84:
 426:main.c        ****                     }
 427:main.c        ****                 }
 428:main.c        ****                 /* ---------------- end turn handling with delay ---------------- */
 429:main.c        ****                 
 430:main.c        ****             
 431:main.c        ****         } else if((CMD_STATES[i] == 2)) {
 1372              		.loc 1 431 0
 1373 02c0 97F95330 		ldrsb	r3, [r7, #83]
 1374 02c4 07F15802 		add	r2, r7, #88
 1375 02c8 1344     		add	r3, r3, r2
 1376 02ca 13F84C3C 		ldrb	r3, [r3, #-76]	@ zero_extendqisi2
 1377 02ce 022B     		cmp	r3, #2
 1378 02d0 5BD1     		bne	.L91
 432:main.c        ****             // Go RIGHT
 433:main.c        ****             g_direction = 2u;
 1379              		.loc 1 433 0
 1380 02d2 B04B     		ldr	r3, .L122
 1381 02d4 0222     		movs	r2, #2
 1382 02d6 1A70     		strb	r2, [r3]
 434:main.c        ****             /* ---------------- Turn handling with arming delay (Option A) ---------------- */
 435:main.c        ****                 /* Arm once on the first detection (edge 0 -> 1/2) */
 436:main.c        ****                 if ((g_direction == 1u || g_direction == 2u) && dir_latched_side == 0){
 1383              		.loc 1 436 0
 1384 02d8 AE4B     		ldr	r3, .L122
 1385 02da 1B78     		ldrb	r3, [r3]
 1386 02dc DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 33


 1387 02de 012B     		cmp	r3, #1
 1388 02e0 04D0     		beq	.L92
 1389              		.loc 1 436 0 is_stmt 0 discriminator 2
 1390 02e2 AC4B     		ldr	r3, .L122
 1391 02e4 1B78     		ldrb	r3, [r3]
 1392 02e6 DBB2     		uxtb	r3, r3
 1393 02e8 022B     		cmp	r3, #2
 1394 02ea 0BD1     		bne	.L93
 1395              	.L92:
 1396              		.loc 1 436 0 discriminator 3
 1397 02ec AA4B     		ldr	r3, .L122+4
 1398 02ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1399 02f0 002B     		cmp	r3, #0
 1400 02f2 07D1     		bne	.L93
 437:main.c        ****                     dir_latched_side = g_direction;          /* remember side */
 1401              		.loc 1 437 0 is_stmt 1
 1402 02f4 A74B     		ldr	r3, .L122
 1403 02f6 1B78     		ldrb	r3, [r3]
 1404 02f8 DAB2     		uxtb	r2, r3
 1405 02fa A74B     		ldr	r3, .L122+4
 1406 02fc 1A70     		strb	r2, [r3]
 438:main.c        ****                     dir_delay_ticks  = DIR_CALL_DELAY_TICKS; /* start countdown */
 1407              		.loc 1 438 0
 1408 02fe A74B     		ldr	r3, .L122+8
 1409 0300 0D22     		movs	r2, #13
 1410 0302 1A80     		strh	r2, [r3]	@ movhi
 1411              	.L93:
 439:main.c        ****                     //CyDelay(50);
 440:main.c        ****                 }
 441:main.c        ****                 /* If request cleared during delay, cancel gracefully */
 442:main.c        ****                 if (g_direction == 0u && dir_latched_side != 0){
 1412              		.loc 1 442 0
 1413 0304 A34B     		ldr	r3, .L122
 1414 0306 1B78     		ldrb	r3, [r3]
 1415 0308 DBB2     		uxtb	r3, r3
 1416 030a 002B     		cmp	r3, #0
 1417 030c 09D1     		bne	.L94
 1418              		.loc 1 442 0 is_stmt 0 discriminator 1
 1419 030e A24B     		ldr	r3, .L122+4
 1420 0310 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421 0312 002B     		cmp	r3, #0
 1422 0314 05D0     		beq	.L94
 443:main.c        ****                     dir_latched_side = 0;
 1423              		.loc 1 443 0 is_stmt 1
 1424 0316 A04B     		ldr	r3, .L122+4
 1425 0318 0022     		movs	r2, #0
 1426 031a 1A70     		strb	r2, [r3]
 444:main.c        ****                     dir_delay_ticks  = 0;
 1427              		.loc 1 444 0
 1428 031c 9F4B     		ldr	r3, .L122+8
 1429 031e 0022     		movs	r2, #0
 1430 0320 1A80     		strh	r2, [r3]	@ movhi
 1431              	.L94:
 445:main.c        ****                 }
 446:main.c        **** 
 447:main.c        ****                 if (g_direction == 1u || g_direction == 2u){
 1432              		.loc 1 447 0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 34


 1433 0322 9C4B     		ldr	r3, .L122
 1434 0324 1B78     		ldrb	r3, [r3]
 1435 0326 DBB2     		uxtb	r3, r3
 1436 0328 012B     		cmp	r3, #1
 1437 032a 05D0     		beq	.L95
 1438              		.loc 1 447 0 is_stmt 0 discriminator 1
 1439 032c 994B     		ldr	r3, .L122
 1440 032e 1B78     		ldrb	r3, [r3]
 1441 0330 DBB2     		uxtb	r3, r3
 1442 0332 022B     		cmp	r3, #2
 1443 0334 40F0FC80 		bne	.L83
 1444              	.L95:
 448:main.c        ****                     if (dir_delay_ticks > 0){
 1445              		.loc 1 448 0 is_stmt 1
 1446 0338 984B     		ldr	r3, .L122+8
 1447 033a 1B88     		ldrh	r3, [r3]
 1448 033c 002B     		cmp	r3, #0
 1449 033e 06D0     		beq	.L96
 449:main.c        ****                         /* Still delaying: keep doing normal straight PI */
 450:main.c        ****                         dir_delay_ticks--;
 1450              		.loc 1 450 0
 1451 0340 964B     		ldr	r3, .L122+8
 1452 0342 1B88     		ldrh	r3, [r3]
 1453 0344 013B     		subs	r3, r3, #1
 1454 0346 9AB2     		uxth	r2, r3
 1455 0348 944B     		ldr	r3, .L122+8
 1456 034a 1A80     		strh	r2, [r3]	@ movhi
 1457 034c F0E0     		b	.L83
 1458              	.L96:
 451:main.c        ****                     } else {
 452:main.c        ****                         /* Delay elapsed: perform the maneuver */
 453:main.c        ****                         Directions_Handle(&g_direction);
 1459              		.loc 1 453 0
 1460 034e 9148     		ldr	r0, .L122
 1461 0350 FFF7FEFF 		bl	Directions_Handle
 454:main.c        **** 
 455:main.c        ****                         /* When turn completes, Directions sets g_direction back to 0 */
 456:main.c        ****                         if (g_direction == 0u){
 1462              		.loc 1 456 0
 1463 0354 8F4B     		ldr	r3, .L122
 1464 0356 1B78     		ldrb	r3, [r3]
 1465 0358 DBB2     		uxtb	r3, r3
 1466 035a 002B     		cmp	r3, #0
 1467 035c 11D1     		bne	.L97
 457:main.c        ****                             pi.i = 0.0f; pi.u = 0.0f; pi.t_loss = 0.0f;  /* clear bias */
 1468              		.loc 1 457 0
 1469 035e 4FF00003 		mov	r3, #0
 1470 0362 FB62     		str	r3, [r7, #44]	@ float
 1471 0364 4FF00003 		mov	r3, #0
 1472 0368 3B63     		str	r3, [r7, #48]	@ float
 1473 036a 4FF00003 		mov	r3, #0
 1474 036e 7B63     		str	r3, [r7, #52]	@ float
 458:main.c        ****                             dir_latched_side = 0;                        /* ready next time */
 1475              		.loc 1 458 0
 1476 0370 894B     		ldr	r3, .L122+4
 1477 0372 0022     		movs	r2, #0
 1478 0374 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 35


 459:main.c        ****                             
 460:main.c        ****                             
 461:main.c        ****                             turn_cooldown_ticks = TURN_COOLDOWN_TICKS);
 1479              		.loc 1 461 0
 1480 0376 8A4B     		ldr	r3, .L122+12
 1481 0378 2622     		movs	r2, #38
 1482 037a 1A80     		strh	r2, [r3]	@ movhi
 462:main.c        ****                             turn_complete = 1;
 1483              		.loc 1 462 0
 1484 037c 0123     		movs	r3, #1
 1485 037e 87F84A30 		strb	r3, [r7, #74]
 1486              	.L97:
 463:main.c        ****                         }
 464:main.c        ****                         CyDelay(LOOP_DT_MS);
 1487              		.loc 1 464 0
 1488 0382 0820     		movs	r0, #8
 1489 0384 FFF7FEFF 		bl	CyDelay
 465:main.c        ****                         continue;  /* skip the rest this tick */
 1490              		.loc 1 465 0
 1491 0388 03E1     		b	.L118
 1492              	.L91:
 466:main.c        ****                     }
 467:main.c        ****                 }
 468:main.c        ****                 /* ---------------- end turn handling with delay ---------------- */
 469:main.c        ****             
 470:main.c        ****         } else if((CMD_STATES[i] == 3)) {
 1493              		.loc 1 470 0
 1494 038a 97F95330 		ldrsb	r3, [r7, #83]
 1495 038e 07F15802 		add	r2, r7, #88
 1496 0392 1344     		add	r3, r3, r2
 1497 0394 13F84C3C 		ldrb	r3, [r3, #-76]	@ zero_extendqisi2
 1498 0398 032B     		cmp	r3, #3
 1499 039a 65D1     		bne	.L98
 471:main.c        ****             // Do U-TURN
 472:main.c        ****             g_direction = 3u;
 1500              		.loc 1 472 0
 1501 039c 7D4B     		ldr	r3, .L122
 1502 039e 0322     		movs	r2, #3
 1503 03a0 1A70     		strb	r2, [r3]
 473:main.c        ****             /* ---------------- Turn handling with arming delay (Option A) ---------------- */
 474:main.c        ****                 /* Arm once on the first detection (edge 0 -> 1/2) */
 475:main.c        ****                 if ((g_direction == 1u || g_direction == 2u || g_direction == 3u) && dir_latched_si
 1504              		.loc 1 475 0
 1505 03a2 7C4B     		ldr	r3, .L122
 1506 03a4 1B78     		ldrb	r3, [r3]
 1507 03a6 DBB2     		uxtb	r3, r3
 1508 03a8 012B     		cmp	r3, #1
 1509 03aa 09D0     		beq	.L99
 1510              		.loc 1 475 0 is_stmt 0 discriminator 2
 1511 03ac 794B     		ldr	r3, .L122
 1512 03ae 1B78     		ldrb	r3, [r3]
 1513 03b0 DBB2     		uxtb	r3, r3
 1514 03b2 022B     		cmp	r3, #2
 1515 03b4 04D0     		beq	.L99
 1516              		.loc 1 475 0 discriminator 4
 1517 03b6 774B     		ldr	r3, .L122
 1518 03b8 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 36


 1519 03ba DBB2     		uxtb	r3, r3
 1520 03bc 032B     		cmp	r3, #3
 1521 03be 0BD1     		bne	.L100
 1522              	.L99:
 1523              		.loc 1 475 0 discriminator 5
 1524 03c0 754B     		ldr	r3, .L122+4
 1525 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1526 03c4 002B     		cmp	r3, #0
 1527 03c6 07D1     		bne	.L100
 476:main.c        ****                     dir_latched_side = g_direction;          /* remember side */
 1528              		.loc 1 476 0 is_stmt 1
 1529 03c8 724B     		ldr	r3, .L122
 1530 03ca 1B78     		ldrb	r3, [r3]
 1531 03cc DAB2     		uxtb	r2, r3
 1532 03ce 724B     		ldr	r3, .L122+4
 1533 03d0 1A70     		strb	r2, [r3]
 477:main.c        ****                     dir_delay_ticks  = DIR_CALL_DELAY_TICKS; /* start countdown */
 1534              		.loc 1 477 0
 1535 03d2 724B     		ldr	r3, .L122+8
 1536 03d4 0D22     		movs	r2, #13
 1537 03d6 1A80     		strh	r2, [r3]	@ movhi
 1538              	.L100:
 478:main.c        ****                     //CyDelay(50);
 479:main.c        ****                 }
 480:main.c        ****                 /* If request cleared during delay, cancel gracefully */
 481:main.c        ****                 if (g_direction == 0u && dir_latched_side != 0){
 1539              		.loc 1 481 0
 1540 03d8 6E4B     		ldr	r3, .L122
 1541 03da 1B78     		ldrb	r3, [r3]
 1542 03dc DBB2     		uxtb	r3, r3
 1543 03de 002B     		cmp	r3, #0
 1544 03e0 09D1     		bne	.L101
 1545              		.loc 1 481 0 is_stmt 0 discriminator 1
 1546 03e2 6D4B     		ldr	r3, .L122+4
 1547 03e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1548 03e6 002B     		cmp	r3, #0
 1549 03e8 05D0     		beq	.L101
 482:main.c        ****                     dir_latched_side = 0;
 1550              		.loc 1 482 0 is_stmt 1
 1551 03ea 6B4B     		ldr	r3, .L122+4
 1552 03ec 0022     		movs	r2, #0
 1553 03ee 1A70     		strb	r2, [r3]
 483:main.c        ****                     dir_delay_ticks  = 0;
 1554              		.loc 1 483 0
 1555 03f0 6A4B     		ldr	r3, .L122+8
 1556 03f2 0022     		movs	r2, #0
 1557 03f4 1A80     		strh	r2, [r3]	@ movhi
 1558              	.L101:
 484:main.c        ****                 }
 485:main.c        **** 
 486:main.c        ****                 if (g_direction == 1u || g_direction == 2u || g_direction == 3u){
 1559              		.loc 1 486 0
 1560 03f6 674B     		ldr	r3, .L122
 1561 03f8 1B78     		ldrb	r3, [r3]
 1562 03fa DBB2     		uxtb	r3, r3
 1563 03fc 012B     		cmp	r3, #1
 1564 03fe 0AD0     		beq	.L102
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 37


 1565              		.loc 1 486 0 is_stmt 0 discriminator 1
 1566 0400 644B     		ldr	r3, .L122
 1567 0402 1B78     		ldrb	r3, [r3]
 1568 0404 DBB2     		uxtb	r3, r3
 1569 0406 022B     		cmp	r3, #2
 1570 0408 05D0     		beq	.L102
 1571              		.loc 1 486 0 discriminator 2
 1572 040a 624B     		ldr	r3, .L122
 1573 040c 1B78     		ldrb	r3, [r3]
 1574 040e DBB2     		uxtb	r3, r3
 1575 0410 032B     		cmp	r3, #3
 1576 0412 40F08D80 		bne	.L83
 1577              	.L102:
 487:main.c        ****                     if (dir_delay_ticks > 0){
 1578              		.loc 1 487 0 is_stmt 1
 1579 0416 614B     		ldr	r3, .L122+8
 1580 0418 1B88     		ldrh	r3, [r3]
 1581 041a 002B     		cmp	r3, #0
 1582 041c 06D0     		beq	.L103
 488:main.c        ****                         /* Still delaying: keep doing normal straight PI */
 489:main.c        ****                         dir_delay_ticks--;
 1583              		.loc 1 489 0
 1584 041e 5F4B     		ldr	r3, .L122+8
 1585 0420 1B88     		ldrh	r3, [r3]
 1586 0422 013B     		subs	r3, r3, #1
 1587 0424 9AB2     		uxth	r2, r3
 1588 0426 5D4B     		ldr	r3, .L122+8
 1589 0428 1A80     		strh	r2, [r3]	@ movhi
 1590 042a 81E0     		b	.L83
 1591              	.L103:
 490:main.c        ****                     } else {
 491:main.c        ****                         /* Delay elapsed: perform the maneuver */
 492:main.c        ****                         Directions_Handle(&g_direction);
 1592              		.loc 1 492 0
 1593 042c 5948     		ldr	r0, .L122
 1594 042e FFF7FEFF 		bl	Directions_Handle
 493:main.c        **** 
 494:main.c        ****                         /* When turn completes, Directions sets g_direction back to 0 */
 495:main.c        ****                         if (g_direction == 0u){
 1595              		.loc 1 495 0
 1596 0432 584B     		ldr	r3, .L122
 1597 0434 1B78     		ldrb	r3, [r3]
 1598 0436 DBB2     		uxtb	r3, r3
 1599 0438 002B     		cmp	r3, #0
 1600 043a 11D1     		bne	.L104
 496:main.c        ****                             pi.i = 0.0f; pi.u = 0.0f; pi.t_loss = 0.0f;  /* clear bias */
 1601              		.loc 1 496 0
 1602 043c 4FF00003 		mov	r3, #0
 1603 0440 FB62     		str	r3, [r7, #44]	@ float
 1604 0442 4FF00003 		mov	r3, #0
 1605 0446 3B63     		str	r3, [r7, #48]	@ float
 1606 0448 4FF00003 		mov	r3, #0
 1607 044c 7B63     		str	r3, [r7, #52]	@ float
 497:main.c        ****                             dir_latched_side = 0;                        /* ready next time */
 1608              		.loc 1 497 0
 1609 044e 524B     		ldr	r3, .L122+4
 1610 0450 0022     		movs	r2, #0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 38


 1611 0452 1A70     		strb	r2, [r3]
 498:main.c        ****                             
 499:main.c        ****                             
 500:main.c        ****                             turn_cooldown_ticks = TURN_COOLDOWN_TICKS);
 1612              		.loc 1 500 0
 1613 0454 524B     		ldr	r3, .L122+12
 1614 0456 2622     		movs	r2, #38
 1615 0458 1A80     		strh	r2, [r3]	@ movhi
 501:main.c        ****                             uTurn_complete = 1;
 1616              		.loc 1 501 0
 1617 045a 0123     		movs	r3, #1
 1618 045c 87F84930 		strb	r3, [r7, #73]
 1619              	.L104:
 502:main.c        ****                         }
 503:main.c        ****                         CyDelay(LOOP_DT_MS);
 1620              		.loc 1 503 0
 1621 0460 0820     		movs	r0, #8
 1622 0462 FFF7FEFF 		bl	CyDelay
 504:main.c        ****                         continue;  /* skip the rest this tick */
 1623              		.loc 1 504 0
 1624 0466 94E0     		b	.L118
 1625              	.L98:
 505:main.c        ****                     }
 506:main.c        ****                 }
 507:main.c        ****                 /* ---------------- end turn handling with delay ---------------- */
 508:main.c        ****           
 509:main.c        ****             
 510:main.c        ****         } else if((CMD_STATES[i] == 5)) {
 1626              		.loc 1 510 0
 1627 0468 97F95330 		ldrsb	r3, [r7, #83]
 1628 046c 07F15802 		add	r2, r7, #88
 1629 0470 1344     		add	r3, r3, r2
 1630 0472 13F84C3C 		ldrb	r3, [r3, #-76]	@ zero_extendqisi2
 1631 0476 052B     		cmp	r3, #5
 1632 0478 30D1     		bne	.L105
 511:main.c        ****         // REACH FOOD
 512:main.c        **** 
 513:main.c        ****          // --- FIX 1: Set the target distance *only once* ---
 514:main.c        ****          // We know we just entered this state if target_dist is 0
 515:main.c        ****         if (target_dist == 0) {
 1633              		.loc 1 515 0
 1634 047a FB6C     		ldr	r3, [r7, #76]
 1635 047c 002B     		cmp	r3, #0
 1636 047e 03D1     		bne	.L106
 516:main.c        ****          // Set target to be 500mm *from our current position*
 517:main.c        ****          target_dist = g_dist_mm + 150 ; // in mm
 1637              		.loc 1 517 0
 1638 0480 484B     		ldr	r3, .L122+16
 1639 0482 1B68     		ldr	r3, [r3]
 1640 0484 9633     		adds	r3, r3, #150
 1641 0486 FB64     		str	r3, [r7, #76]
 1642              	.L106:
 518:main.c        ****          }
 519:main.c        **** 
 520:main.c        ****         // Check if we have *now* reached that target
 521:main.c        ****          g_stop_now = (g_dist_mm >= target_dist) ? 1u : 0u;
 1643              		.loc 1 521 0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 39


 1644 0488 464B     		ldr	r3, .L122+16
 1645 048a 1A68     		ldr	r2, [r3]
 1646 048c FB6C     		ldr	r3, [r7, #76]
 1647 048e 9A42     		cmp	r2, r3
 1648 0490 01DB     		blt	.L107
 1649              		.loc 1 521 0 is_stmt 0 discriminator 1
 1650 0492 0122     		movs	r2, #1
 1651 0494 00E0     		b	.L108
 1652              	.L107:
 1653              		.loc 1 521 0 discriminator 2
 1654 0496 0022     		movs	r2, #0
 1655              	.L108:
 1656              		.loc 1 521 0 discriminator 4
 1657 0498 434B     		ldr	r3, .L122+20
 1658 049a 1A70     		strb	r2, [r3]
 522:main.c        **** 
 523:main.c        ****          // --- FIX 2 & 3: Use if/else and remove 'continue' ---
 524:main.c        ****          if (g_stop_now) {
 1659              		.loc 1 524 0 is_stmt 1 discriminator 4
 1660 049c 424B     		ldr	r3, .L122+20
 1661 049e 1B78     		ldrb	r3, [r3]
 1662 04a0 DBB2     		uxtb	r3, r3
 1663 04a2 002B     		cmp	r3, #0
 1664 04a4 0DD0     		beq	.L109
 525:main.c        ****          // Target met: STOP
 526:main.c        ****          set_motors_symmetric(0);
 1665              		.loc 1 526 0
 1666 04a6 0020     		movs	r0, #0
 1667 04a8 FFF7FEFF 		bl	set_motors_symmetric
 527:main.c        ****          motor_enable(1u, 1u); // Disable the motors
 1668              		.loc 1 527 0
 1669 04ac 0121     		movs	r1, #1
 1670 04ae 0120     		movs	r0, #1
 1671 04b0 FFF7FEFF 		bl	motor_enable
 528:main.c        ****         
 529:main.c        ****          fruit_complete = 1; // Flag that this state is done
 1672              		.loc 1 529 0
 1673 04b4 0123     		movs	r3, #1
 1674 04b6 87F84830 		strb	r3, [r7, #72]
 530:main.c        ****         D4_Write(1);
 1675              		.loc 1 530 0
 1676 04ba 0120     		movs	r0, #1
 1677 04bc FFF7FEFF 		bl	D4_Write
 1678 04c0 36E0     		b	.L83
 1679              	.L109:
 1680              	.LBB5:
 531:main.c        ****          // DO NOT 'continue' here
 532:main.c        ****         } else {
 533:main.c        ****          // Target not met: KEEP DRIVING
 534:main.c        ****          int steer = pi_step(&pi, V4_pp, V5_pp, V6_pp);
 1681              		.loc 1 534 0
 1682 04c2 7989     		ldrh	r1, [r7, #10]
 1683 04c4 3A89     		ldrh	r2, [r7, #8]
 1684 04c6 FB88     		ldrh	r3, [r7, #6]
 1685 04c8 07F12C00 		add	r0, r7, #44
 1686 04cc FFF7FEFF 		bl	pi_step
 1687 04d0 B863     		str	r0, [r7, #56]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 40


 535:main.c        ****          set_motors_with_trim_and_steer(center_duty_est, steer);
 1688              		.loc 1 535 0
 1689 04d2 B96B     		ldr	r1, [r7, #56]
 1690 04d4 786D     		ldr	r0, [r7, #84]
 1691 04d6 FFF7FEFF 		bl	set_motors_with_trim_and_steer
 1692 04da 29E0     		b	.L83
 1693              	.L105:
 1694              	.LBE5:
 536:main.c        ****          }
 537:main.c        **** 
 538:main.c        ****         } else if((CMD_STATES[i] == 6)) {
 1695              		.loc 1 538 0
 1696 04dc 97F95330 		ldrsb	r3, [r7, #83]
 1697 04e0 07F15802 		add	r2, r7, #88
 1698 04e4 1344     		add	r3, r3, r2
 1699 04e6 13F84C3C 		ldrb	r3, [r3, #-76]	@ zero_extendqisi2
 1700 04ea 062B     		cmp	r3, #6
 1701 04ec 20D1     		bne	.L83
 539:main.c        ****          // FINISH
 540:main.c        **** 
 541:main.c        ****          // --- Apply the same logic as STATE 5 ---
 542:main.c        ****          if (target_dist == 0) {
 1702              		.loc 1 542 0
 1703 04ee FB6C     		ldr	r3, [r7, #76]
 1704 04f0 002B     		cmp	r3, #0
 1705 04f2 04D1     		bne	.L111
 543:main.c        ****          target_dist = g_dist_mm + 500; // in mm
 1706              		.loc 1 543 0
 1707 04f4 2B4B     		ldr	r3, .L122+16
 1708 04f6 1B68     		ldr	r3, [r3]
 1709 04f8 03F5FA73 		add	r3, r3, #500
 1710 04fc FB64     		str	r3, [r7, #76]
 1711              	.L111:
 544:main.c        ****          }
 545:main.c        **** 
 546:main.c        ****          g_stop_now = (g_dist_mm >= target_dist) ? 1u : 0u;
 1712              		.loc 1 546 0
 1713 04fe 294B     		ldr	r3, .L122+16
 1714 0500 1A68     		ldr	r2, [r3]
 1715 0502 FB6C     		ldr	r3, [r7, #76]
 1716 0504 9A42     		cmp	r2, r3
 1717 0506 01DB     		blt	.L112
 1718              		.loc 1 546 0 is_stmt 0 discriminator 1
 1719 0508 0122     		movs	r2, #1
 1720 050a 00E0     		b	.L113
 1721              	.L112:
 1722              		.loc 1 546 0 discriminator 2
 1723 050c 0022     		movs	r2, #0
 1724              	.L113:
 1725              		.loc 1 546 0 discriminator 4
 1726 050e 264B     		ldr	r3, .L122+20
 1727 0510 1A70     		strb	r2, [r3]
 547:main.c        **** 
 548:main.c        ****          if (g_stop_now) {
 1728              		.loc 1 548 0 is_stmt 1 discriminator 4
 1729 0512 254B     		ldr	r3, .L122+20
 1730 0514 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 41


 1731 0516 DBB2     		uxtb	r3, r3
 1732 0518 002B     		cmp	r3, #0
 1733 051a 09D0     		beq	.L83
 549:main.c        ****          set_motors_symmetric(0);
 1734              		.loc 1 549 0
 1735 051c 0020     		movs	r0, #0
 1736 051e FFF7FEFF 		bl	set_motors_symmetric
 550:main.c        ****          motor_enable(1u, 1u);
 1737              		.loc 1 550 0
 1738 0522 0121     		movs	r1, #1
 1739 0524 0120     		movs	r0, #1
 1740 0526 FFF7FEFF 		bl	motor_enable
 551:main.c        **** 
 552:main.c        ****         // **** ADDED THIS FLAG ****
 553:main.c        ****         // This tells the state machine to advance
 554:main.c        ****          // (assuming 'FINISH' should also set 'fruit_complete')
 555:main.c        ****         fruit_complete = 1; 
 1741              		.loc 1 555 0
 1742 052a 0123     		movs	r3, #1
 1743 052c 87F84830 		strb	r3, [r7, #72]
 1744              	.L83:
 556:main.c        **** 
 557:main.c        ****          // 'continue' is removed
 558:main.c        ****          }
 559:main.c        **** }
 560:main.c        ****         if (straight_complete == 1u || turn_complete == 1u || uTurn_complete == 1u || fruit_complet
 1745              		.loc 1 560 0
 1746 0530 97F94B30 		ldrsb	r3, [r7, #75]
 1747 0534 012B     		cmp	r3, #1
 1748 0536 0BD0     		beq	.L114
 1749              		.loc 1 560 0 is_stmt 0 discriminator 1
 1750 0538 97F94A30 		ldrsb	r3, [r7, #74]
 1751 053c 012B     		cmp	r3, #1
 1752 053e 07D0     		beq	.L114
 1753              		.loc 1 560 0 discriminator 2
 1754 0540 97F94930 		ldrsb	r3, [r7, #73]
 1755 0544 012B     		cmp	r3, #1
 1756 0546 03D0     		beq	.L114
 1757              		.loc 1 560 0 discriminator 3
 1758 0548 97F94830 		ldrsb	r3, [r7, #72]
 1759 054c 012B     		cmp	r3, #1
 1760 054e 1DD1     		bne	.L115
 1761              	.L114:
 561:main.c        ****             
 562:main.c        ****             // Check if we are at the end of the array
 563:main.c        ****         if (i >= indexMAX) {
 1762              		.loc 1 563 0 is_stmt 1
 1763 0550 97F95320 		ldrsb	r2, [r7, #83]
 1764 0554 97F94730 		ldrsb	r3, [r7, #71]
 1765 0558 9A42     		cmp	r2, r3
 1766 055a 03DB     		blt	.L116
 564:main.c        ****          // We are done. Set permanent stop flag.
 565:main.c        ****          g_stop_now = 1;
 1767              		.loc 1 565 0
 1768 055c 124B     		ldr	r3, .L122+20
 1769 055e 0122     		movs	r2, #1
 1770 0560 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 42


 1771 0562 05E0     		b	.L117
 1772              	.L116:
 566:main.c        ****          } else {
 567:main.c        ****          // Not done. Advance to the next state.
 568:main.c        ****          i += 1;
 1773              		.loc 1 568 0
 1774 0564 97F85330 		ldrb	r3, [r7, #83]	@ zero_extendqisi2
 1775 0568 0133     		adds	r3, r3, #1
 1776 056a DBB2     		uxtb	r3, r3
 1777 056c 87F85330 		strb	r3, [r7, #83]
 1778              	.L117:
 569:main.c        ****         }
 570:main.c        ****             
 571:main.c        ****             straight_complete = 0;
 1779              		.loc 1 571 0
 1780 0570 0023     		movs	r3, #0
 1781 0572 87F84B30 		strb	r3, [r7, #75]
 572:main.c        ****             turn_complete = 0;
 1782              		.loc 1 572 0
 1783 0576 0023     		movs	r3, #0
 1784 0578 87F84A30 		strb	r3, [r7, #74]
 573:main.c        ****             uTurn_complete = 0;
 1785              		.loc 1 573 0
 1786 057c 0023     		movs	r3, #0
 1787 057e 87F84930 		strb	r3, [r7, #73]
 574:main.c        ****             fruit_complete = 0;
 1788              		.loc 1 574 0
 1789 0582 0023     		movs	r3, #0
 1790 0584 87F84830 		strb	r3, [r7, #72]
 575:main.c        ****             
 576:main.c        ****             target_dist = 0;
 1791              		.loc 1 576 0
 1792 0588 0023     		movs	r3, #0
 1793 058a FB64     		str	r3, [r7, #76]
 1794              	.L115:
 577:main.c        ****         }
 578:main.c        **** 
 579:main.c        ****         CyDelay(LOOP_DT_MS);
 1795              		.loc 1 579 0
 1796 058c 0820     		movs	r0, #8
 1797 058e FFF7FEFF 		bl	CyDelay
 1798              	.L118:
 1799              	.LBE3:
 580:main.c        ****     }
 1800              		.loc 1 580 0 discriminator 1
 1801 0592 B7E5     		b	.L119
 1802              	.L123:
 1803              		.align	2
 1804              	.L122:
 1805 0594 06000000 		.word	g_direction
 1806 0598 0E000000 		.word	dir_latched_side
 1807 059c 0C000000 		.word	dir_delay_ticks
 1808 05a0 10000000 		.word	turn_cooldown_ticks
 1809 05a4 08000000 		.word	g_dist_mm
 1810 05a8 07000000 		.word	g_stop_now
 1811              		.cfi_endproc
 1812              	.LFE69:
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 43


 1813              		.size	main, .-main
 1814              		.text
 1815              	.Letext0:
 1816              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1817              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1818              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 1819              		.section	.debug_info,"",%progbits
 1820              	.Ldebug_info0:
 1821 0000 19060000 		.4byte	0x619
 1822 0004 0400     		.2byte	0x4
 1823 0006 00000000 		.4byte	.Ldebug_abbrev0
 1824 000a 04       		.byte	0x4
 1825 000b 01       		.uleb128 0x1
 1826 000c 60000000 		.4byte	.LASF65
 1827 0010 0C       		.byte	0xc
 1828 0011 10030000 		.4byte	.LASF66
 1829 0015 1B010000 		.4byte	.LASF67
 1830 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1831 001d 00000000 		.4byte	0
 1832 0021 00000000 		.4byte	.Ldebug_line0
 1833 0025 02       		.uleb128 0x2
 1834 0026 AA020000 		.4byte	.LASF0
 1835 002a 02       		.byte	0x2
 1836 002b 1B       		.byte	0x1b
 1837 002c 30000000 		.4byte	0x30
 1838 0030 03       		.uleb128 0x3
 1839 0031 01       		.byte	0x1
 1840 0032 06       		.byte	0x6
 1841 0033 1E020000 		.4byte	.LASF2
 1842 0037 02       		.uleb128 0x2
 1843 0038 A0010000 		.4byte	.LASF1
 1844 003c 02       		.byte	0x2
 1845 003d 1D       		.byte	0x1d
 1846 003e 42000000 		.4byte	0x42
 1847 0042 03       		.uleb128 0x3
 1848 0043 01       		.byte	0x1
 1849 0044 08       		.byte	0x8
 1850 0045 AA010000 		.4byte	.LASF3
 1851 0049 03       		.uleb128 0x3
 1852 004a 02       		.byte	0x2
 1853 004b 05       		.byte	0x5
 1854 004c 3F000000 		.4byte	.LASF4
 1855 0050 02       		.uleb128 0x2
 1856 0051 F3000000 		.4byte	.LASF5
 1857 0055 02       		.byte	0x2
 1858 0056 2B       		.byte	0x2b
 1859 0057 5B000000 		.4byte	0x5b
 1860 005b 03       		.uleb128 0x3
 1861 005c 02       		.byte	0x2
 1862 005d 07       		.byte	0x7
 1863 005e 8A020000 		.4byte	.LASF6
 1864 0062 02       		.uleb128 0x2
 1865 0063 6D030000 		.4byte	.LASF7
 1866 0067 02       		.byte	0x2
 1867 0068 3F       		.byte	0x3f
 1868 0069 6D000000 		.4byte	0x6d
 1869 006d 03       		.uleb128 0x3
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 44


 1870 006e 04       		.byte	0x4
 1871 006f 05       		.byte	0x5
 1872 0070 87010000 		.4byte	.LASF8
 1873 0074 03       		.uleb128 0x3
 1874 0075 04       		.byte	0x4
 1875 0076 07       		.byte	0x7
 1876 0077 17030000 		.4byte	.LASF9
 1877 007b 02       		.uleb128 0x2
 1878 007c 90010000 		.4byte	.LASF10
 1879 0080 02       		.byte	0x2
 1880 0081 59       		.byte	0x59
 1881 0082 86000000 		.4byte	0x86
 1882 0086 03       		.uleb128 0x3
 1883 0087 08       		.byte	0x8
 1884 0088 05       		.byte	0x5
 1885 0089 6F010000 		.4byte	.LASF11
 1886 008d 03       		.uleb128 0x3
 1887 008e 08       		.byte	0x8
 1888 008f 07       		.byte	0x7
 1889 0090 2A020000 		.4byte	.LASF12
 1890 0094 04       		.uleb128 0x4
 1891 0095 04       		.byte	0x4
 1892 0096 05       		.byte	0x5
 1893 0097 696E7400 		.ascii	"int\000"
 1894 009b 03       		.uleb128 0x3
 1895 009c 04       		.byte	0x4
 1896 009d 07       		.byte	0x7
 1897 009e 4E020000 		.4byte	.LASF13
 1898 00a2 02       		.uleb128 0x2
 1899 00a3 38000000 		.4byte	.LASF14
 1900 00a7 03       		.byte	0x3
 1901 00a8 14       		.byte	0x14
 1902 00a9 25000000 		.4byte	0x25
 1903 00ad 02       		.uleb128 0x2
 1904 00ae 06010000 		.4byte	.LASF15
 1905 00b2 03       		.byte	0x3
 1906 00b3 18       		.byte	0x18
 1907 00b4 37000000 		.4byte	0x37
 1908 00b8 02       		.uleb128 0x2
 1909 00b9 61020000 		.4byte	.LASF16
 1910 00bd 03       		.byte	0x3
 1911 00be 24       		.byte	0x24
 1912 00bf 50000000 		.4byte	0x50
 1913 00c3 02       		.uleb128 0x2
 1914 00c4 D2020000 		.4byte	.LASF17
 1915 00c8 03       		.byte	0x3
 1916 00c9 2C       		.byte	0x2c
 1917 00ca 62000000 		.4byte	0x62
 1918 00ce 02       		.uleb128 0x2
 1919 00cf FE000000 		.4byte	.LASF18
 1920 00d3 03       		.byte	0x3
 1921 00d4 38       		.byte	0x38
 1922 00d5 7B000000 		.4byte	0x7b
 1923 00d9 03       		.uleb128 0x3
 1924 00da 04       		.byte	0x4
 1925 00db 04       		.byte	0x4
 1926 00dc 69010000 		.4byte	.LASF19
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 45


 1927 00e0 03       		.uleb128 0x3
 1928 00e1 08       		.byte	0x8
 1929 00e2 04       		.byte	0x4
 1930 00e3 99030000 		.4byte	.LASF20
 1931 00e7 03       		.uleb128 0x3
 1932 00e8 01       		.byte	0x1
 1933 00e9 08       		.byte	0x8
 1934 00ea 7D010000 		.4byte	.LASF21
 1935 00ee 03       		.uleb128 0x3
 1936 00ef 08       		.byte	0x8
 1937 00f0 04       		.byte	0x4
 1938 00f1 D9010000 		.4byte	.LASF22
 1939 00f5 03       		.uleb128 0x3
 1940 00f6 04       		.byte	0x4
 1941 00f7 07       		.byte	0x7
 1942 00f8 57000000 		.4byte	.LASF23
 1943 00fc 05       		.uleb128 0x5
 1944 00fd AD000000 		.4byte	0xad
 1945 0101 06       		.uleb128 0x6
 1946 0102 0C       		.byte	0xc
 1947 0103 01       		.byte	0x1
 1948 0104 93       		.byte	0x93
 1949 0105 2A010000 		.4byte	0x12a
 1950 0109 07       		.uleb128 0x7
 1951 010a 6900     		.ascii	"i\000"
 1952 010c 01       		.byte	0x1
 1953 010d 93       		.byte	0x93
 1954 010e D9000000 		.4byte	0xd9
 1955 0112 00       		.byte	0
 1956 0113 07       		.uleb128 0x7
 1957 0114 7500     		.ascii	"u\000"
 1958 0116 01       		.byte	0x1
 1959 0117 93       		.byte	0x93
 1960 0118 D9000000 		.4byte	0xd9
 1961 011c 04       		.byte	0x4
 1962 011d 08       		.uleb128 0x8
 1963 011e 66030000 		.4byte	.LASF24
 1964 0122 01       		.byte	0x1
 1965 0123 93       		.byte	0x93
 1966 0124 D9000000 		.4byte	0xd9
 1967 0128 08       		.byte	0x8
 1968 0129 00       		.byte	0
 1969 012a 02       		.uleb128 0x2
 1970 012b 82010000 		.4byte	.LASF25
 1971 012f 01       		.byte	0x1
 1972 0130 93       		.byte	0x93
 1973 0131 01010000 		.4byte	0x101
 1974 0135 09       		.uleb128 0x9
 1975 0136 B3020000 		.4byte	.LASF68
 1976 013a 01       		.byte	0x1
 1977 013b 49       		.byte	0x49
 1978 013c 00000000 		.4byte	.LFB64
 1979 0140 14010000 		.4byte	.LFE64-.LFB64
 1980 0144 01       		.uleb128 0x1
 1981 0145 9C       		.byte	0x9c
 1982 0146 F0010000 		.4byte	0x1f0
 1983 014a 0A       		.uleb128 0xa
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 46


 1984 014b 12000000 		.4byte	.LBB2
 1985 014f EA000000 		.4byte	.LBE2-.LBB2
 1986 0153 0B       		.uleb128 0xb
 1987 0154 D4010000 		.4byte	.LASF26
 1988 0158 01       		.byte	0x1
 1989 0159 4C       		.byte	0x4c
 1990 015a C3000000 		.4byte	0xc3
 1991 015e 02       		.uleb128 0x2
 1992 015f 91       		.byte	0x91
 1993 0160 54       		.sleb128 -44
 1994 0161 0B       		.uleb128 0xb
 1995 0162 0E010000 		.4byte	.LASF27
 1996 0166 01       		.byte	0x1
 1997 0167 4D       		.byte	0x4d
 1998 0168 C3000000 		.4byte	0xc3
 1999 016c 02       		.uleb128 0x2
 2000 016d 91       		.byte	0x91
 2001 016e 50       		.sleb128 -48
 2002 016f 0C       		.uleb128 0xc
 2003 0170 643100   		.ascii	"d1\000"
 2004 0173 01       		.byte	0x1
 2005 0174 4F       		.byte	0x4f
 2006 0175 C3000000 		.4byte	0xc3
 2007 0179 02       		.uleb128 0x2
 2008 017a 91       		.byte	0x91
 2009 017b 4C       		.sleb128 -52
 2010 017c 0C       		.uleb128 0xc
 2011 017d 643200   		.ascii	"d2\000"
 2012 0180 01       		.byte	0x1
 2013 0181 4F       		.byte	0x4f
 2014 0182 C3000000 		.4byte	0xc3
 2015 0186 02       		.uleb128 0x2
 2016 0187 91       		.byte	0x91
 2017 0188 48       		.sleb128 -56
 2018 0189 0C       		.uleb128 0xc
 2019 018a 613100   		.ascii	"a1\000"
 2020 018d 01       		.byte	0x1
 2021 018e 50       		.byte	0x50
 2022 018f C3000000 		.4byte	0xc3
 2023 0193 02       		.uleb128 0x2
 2024 0194 91       		.byte	0x91
 2025 0195 44       		.sleb128 -60
 2026 0196 0C       		.uleb128 0xc
 2027 0197 613200   		.ascii	"a2\000"
 2028 019a 01       		.byte	0x1
 2029 019b 51       		.byte	0x51
 2030 019c C3000000 		.4byte	0xc3
 2031 01a0 02       		.uleb128 0x2
 2032 01a1 91       		.byte	0x91
 2033 01a2 40       		.sleb128 -64
 2034 01a3 0B       		.uleb128 0xb
 2035 01a4 C3030000 		.4byte	.LASF28
 2036 01a8 01       		.byte	0x1
 2037 01a9 52       		.byte	0x52
 2038 01aa C3000000 		.4byte	0xc3
 2039 01ae 03       		.uleb128 0x3
 2040 01af 91       		.byte	0x91
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 47


 2041 01b0 BC7F     		.sleb128 -68
 2042 01b2 0B       		.uleb128 0xb
 2043 01b3 29030000 		.4byte	.LASF29
 2044 01b7 01       		.byte	0x1
 2045 01b8 53       		.byte	0x53
 2046 01b9 C3000000 		.4byte	0xc3
 2047 01bd 03       		.uleb128 0x3
 2048 01be 91       		.byte	0x91
 2049 01bf B87F     		.sleb128 -72
 2050 01c1 0C       		.uleb128 0xc
 2051 01c2 6E756D00 		.ascii	"num\000"
 2052 01c6 01       		.byte	0x1
 2053 01c7 56       		.byte	0x56
 2054 01c8 CE000000 		.4byte	0xce
 2055 01cc 03       		.uleb128 0x3
 2056 01cd 91       		.byte	0x91
 2057 01ce B07F     		.sleb128 -80
 2058 01d0 0B       		.uleb128 0xb
 2059 01d1 13010000 		.4byte	.LASF30
 2060 01d5 01       		.byte	0x1
 2061 01d6 57       		.byte	0x57
 2062 01d7 C3000000 		.4byte	0xc3
 2063 01db 03       		.uleb128 0x3
 2064 01dc 91       		.byte	0x91
 2065 01dd AC7F     		.sleb128 -84
 2066 01df 0B       		.uleb128 0xb
 2067 01e0 EE020000 		.4byte	.LASF31
 2068 01e4 01       		.byte	0x1
 2069 01e5 58       		.byte	0x58
 2070 01e6 C3000000 		.4byte	0xc3
 2071 01ea 03       		.uleb128 0x3
 2072 01eb 91       		.byte	0x91
 2073 01ec A87F     		.sleb128 -88
 2074 01ee 00       		.byte	0
 2075 01ef 00       		.byte	0
 2076 01f0 0D       		.uleb128 0xd
 2077 01f1 77030000 		.4byte	.LASF35
 2078 01f5 01       		.byte	0x1
 2079 01f6 67       		.byte	0x67
 2080 01f7 D9000000 		.4byte	0xd9
 2081 01fb 00000000 		.4byte	.LFB65
 2082 01ff 44000000 		.4byte	.LFE65-.LFB65
 2083 0203 01       		.uleb128 0x1
 2084 0204 9C       		.byte	0x9c
 2085 0205 17020000 		.4byte	0x217
 2086 0209 0E       		.uleb128 0xe
 2087 020a 707000   		.ascii	"pp\000"
 2088 020d 01       		.byte	0x1
 2089 020e 67       		.byte	0x67
 2090 020f B8000000 		.4byte	0xb8
 2091 0213 02       		.uleb128 0x2
 2092 0214 91       		.byte	0x91
 2093 0215 76       		.sleb128 -10
 2094 0216 00       		.byte	0
 2095 0217 0F       		.uleb128 0xf
 2096 0218 33030000 		.4byte	.LASF69
 2097 021c 01       		.byte	0x1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 48


 2098 021d 6F       		.byte	0x6f
 2099 021e 00000000 		.4byte	.LFB66
 2100 0222 48010000 		.4byte	.LFE66-.LFB66
 2101 0226 01       		.uleb128 0x1
 2102 0227 9C       		.byte	0x9c
 2103 0228 A5020000 		.4byte	0x2a5
 2104 022c 10       		.uleb128 0x10
 2105 022d 29000000 		.4byte	.LASF32
 2106 0231 01       		.byte	0x1
 2107 0232 6F       		.byte	0x6f
 2108 0233 A5020000 		.4byte	0x2a5
 2109 0237 02       		.uleb128 0x2
 2110 0238 91       		.byte	0x91
 2111 0239 64       		.sleb128 -28
 2112 023a 10       		.uleb128 0x10
 2113 023b 63010000 		.4byte	.LASF33
 2114 023f 01       		.byte	0x1
 2115 0240 6F       		.byte	0x6f
 2116 0241 A5020000 		.4byte	0x2a5
 2117 0245 02       		.uleb128 0x2
 2118 0246 91       		.byte	0x91
 2119 0247 60       		.sleb128 -32
 2120 0248 10       		.uleb128 0x10
 2121 0249 5B020000 		.4byte	.LASF34
 2122 024d 01       		.byte	0x1
 2123 024e 6F       		.byte	0x6f
 2124 024f A5020000 		.4byte	0x2a5
 2125 0253 02       		.uleb128 0x2
 2126 0254 91       		.byte	0x91
 2127 0255 5C       		.sleb128 -36
 2128 0256 0C       		.uleb128 0xc
 2129 0257 563100   		.ascii	"V1\000"
 2130 025a 01       		.byte	0x1
 2131 025b 71       		.byte	0x71
 2132 025c B8000000 		.4byte	0xb8
 2133 0260 02       		.uleb128 0x2
 2134 0261 91       		.byte	0x91
 2135 0262 76       		.sleb128 -10
 2136 0263 0C       		.uleb128 0xc
 2137 0264 563200   		.ascii	"V2\000"
 2138 0267 01       		.byte	0x1
 2139 0268 72       		.byte	0x72
 2140 0269 B8000000 		.4byte	0xb8
 2141 026d 02       		.uleb128 0x2
 2142 026e 91       		.byte	0x91
 2143 026f 74       		.sleb128 -12
 2144 0270 0C       		.uleb128 0xc
 2145 0271 563300   		.ascii	"V3\000"
 2146 0274 01       		.byte	0x1
 2147 0275 73       		.byte	0x73
 2148 0276 B8000000 		.4byte	0xb8
 2149 027a 02       		.uleb128 0x2
 2150 027b 91       		.byte	0x91
 2151 027c 72       		.sleb128 -14
 2152 027d 0C       		.uleb128 0xc
 2153 027e 563400   		.ascii	"V4\000"
 2154 0281 01       		.byte	0x1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 49


 2155 0282 74       		.byte	0x74
 2156 0283 B8000000 		.4byte	0xb8
 2157 0287 02       		.uleb128 0x2
 2158 0288 91       		.byte	0x91
 2159 0289 70       		.sleb128 -16
 2160 028a 0C       		.uleb128 0xc
 2161 028b 563500   		.ascii	"V5\000"
 2162 028e 01       		.byte	0x1
 2163 028f 75       		.byte	0x75
 2164 0290 B8000000 		.4byte	0xb8
 2165 0294 02       		.uleb128 0x2
 2166 0295 91       		.byte	0x91
 2167 0296 6E       		.sleb128 -18
 2168 0297 0C       		.uleb128 0xc
 2169 0298 563600   		.ascii	"V6\000"
 2170 029b 01       		.byte	0x1
 2171 029c 76       		.byte	0x76
 2172 029d B8000000 		.4byte	0xb8
 2173 02a1 02       		.uleb128 0x2
 2174 02a2 91       		.byte	0x91
 2175 02a3 6C       		.sleb128 -20
 2176 02a4 00       		.byte	0
 2177 02a5 11       		.uleb128 0x11
 2178 02a6 04       		.byte	0x4
 2179 02a7 B8000000 		.4byte	0xb8
 2180 02ab 0D       		.uleb128 0xd
 2181 02ac 77020000 		.4byte	.LASF36
 2182 02b0 01       		.byte	0x1
 2183 02b1 94       		.byte	0x94
 2184 02b2 D9000000 		.4byte	0xd9
 2185 02b6 00000000 		.4byte	.LFB67
 2186 02ba 3A000000 		.4byte	.LFE67-.LFB67
 2187 02be 01       		.uleb128 0x1
 2188 02bf 9C       		.byte	0x9c
 2189 02c0 EB020000 		.4byte	0x2eb
 2190 02c4 0E       		.uleb128 0xe
 2191 02c5 7800     		.ascii	"x\000"
 2192 02c7 01       		.byte	0x1
 2193 02c8 94       		.byte	0x94
 2194 02c9 D9000000 		.4byte	0xd9
 2195 02cd 02       		.uleb128 0x2
 2196 02ce 91       		.byte	0x91
 2197 02cf 74       		.sleb128 -12
 2198 02d0 0E       		.uleb128 0xe
 2199 02d1 6C6F00   		.ascii	"lo\000"
 2200 02d4 01       		.byte	0x1
 2201 02d5 94       		.byte	0x94
 2202 02d6 D9000000 		.4byte	0xd9
 2203 02da 02       		.uleb128 0x2
 2204 02db 91       		.byte	0x91
 2205 02dc 70       		.sleb128 -16
 2206 02dd 0E       		.uleb128 0xe
 2207 02de 686900   		.ascii	"hi\000"
 2208 02e1 01       		.byte	0x1
 2209 02e2 94       		.byte	0x94
 2210 02e3 D9000000 		.4byte	0xd9
 2211 02e7 02       		.uleb128 0x2
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 50


 2212 02e8 91       		.byte	0x91
 2213 02e9 6C       		.sleb128 -20
 2214 02ea 00       		.byte	0
 2215 02eb 0D       		.uleb128 0xd
 2216 02ec DA020000 		.4byte	.LASF37
 2217 02f0 01       		.byte	0x1
 2218 02f1 96       		.byte	0x96
 2219 02f2 94000000 		.4byte	0x94
 2220 02f6 00000000 		.4byte	.LFB68
 2221 02fa 88020000 		.4byte	.LFE68-.LFB68
 2222 02fe 01       		.uleb128 0x1
 2223 02ff 9C       		.byte	0x9c
 2224 0300 E1030000 		.4byte	0x3e1
 2225 0304 0E       		.uleb128 0xe
 2226 0305 706900   		.ascii	"pi\000"
 2227 0308 01       		.byte	0x1
 2228 0309 96       		.byte	0x96
 2229 030a E1030000 		.4byte	0x3e1
 2230 030e 03       		.uleb128 0x3
 2231 030f 91       		.byte	0x91
 2232 0310 BC7F     		.sleb128 -68
 2233 0312 10       		.uleb128 0x10
 2234 0313 29000000 		.4byte	.LASF32
 2235 0317 01       		.byte	0x1
 2236 0318 96       		.byte	0x96
 2237 0319 B8000000 		.4byte	0xb8
 2238 031d 03       		.uleb128 0x3
 2239 031e 91       		.byte	0x91
 2240 031f BA7F     		.sleb128 -70
 2241 0321 10       		.uleb128 0x10
 2242 0322 63010000 		.4byte	.LASF33
 2243 0326 01       		.byte	0x1
 2244 0327 96       		.byte	0x96
 2245 0328 B8000000 		.4byte	0xb8
 2246 032c 03       		.uleb128 0x3
 2247 032d 91       		.byte	0x91
 2248 032e B87F     		.sleb128 -72
 2249 0330 10       		.uleb128 0x10
 2250 0331 5B020000 		.4byte	.LASF34
 2251 0335 01       		.byte	0x1
 2252 0336 96       		.byte	0x96
 2253 0337 B8000000 		.4byte	0xb8
 2254 033b 03       		.uleb128 0x3
 2255 033c 91       		.byte	0x91
 2256 033d B67F     		.sleb128 -74
 2257 033f 0C       		.uleb128 0xc
 2258 0340 633400   		.ascii	"c4\000"
 2259 0343 01       		.byte	0x1
 2260 0344 98       		.byte	0x98
 2261 0345 D9000000 		.4byte	0xd9
 2262 0349 02       		.uleb128 0x2
 2263 034a 91       		.byte	0x91
 2264 034b 68       		.sleb128 -24
 2265 034c 0C       		.uleb128 0xc
 2266 034d 633500   		.ascii	"c5\000"
 2267 0350 01       		.byte	0x1
 2268 0351 99       		.byte	0x99
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 51


 2269 0352 D9000000 		.4byte	0xd9
 2270 0356 02       		.uleb128 0x2
 2271 0357 91       		.byte	0x91
 2272 0358 64       		.sleb128 -28
 2273 0359 0C       		.uleb128 0xc
 2274 035a 633600   		.ascii	"c6\000"
 2275 035d 01       		.byte	0x1
 2276 035e 9A       		.byte	0x9a
 2277 035f D9000000 		.4byte	0xd9
 2278 0363 02       		.uleb128 0x2
 2279 0364 91       		.byte	0x91
 2280 0365 60       		.sleb128 -32
 2281 0366 0C       		.uleb128 0xc
 2282 0367 73756D00 		.ascii	"sum\000"
 2283 036b 01       		.byte	0x1
 2284 036c 9B       		.byte	0x9b
 2285 036d D9000000 		.4byte	0xd9
 2286 0371 02       		.uleb128 0x2
 2287 0372 91       		.byte	0x91
 2288 0373 5C       		.sleb128 -36
 2289 0374 0B       		.uleb128 0xb
 2290 0375 00000000 		.4byte	.LASF38
 2291 0379 01       		.byte	0x1
 2292 037a 9C       		.byte	0x9c
 2293 037b E7030000 		.4byte	0x3e7
 2294 037f 02       		.uleb128 0x2
 2295 0380 91       		.byte	0x91
 2296 0381 5B       		.sleb128 -37
 2297 0382 0C       		.uleb128 0xc
 2298 0383 706F7300 		.ascii	"pos\000"
 2299 0387 01       		.byte	0x1
 2300 0388 9E       		.byte	0x9e
 2301 0389 D9000000 		.4byte	0xd9
 2302 038d 02       		.uleb128 0x2
 2303 038e 91       		.byte	0x91
 2304 038f 6C       		.sleb128 -20
 2305 0390 0C       		.uleb128 0xc
 2306 0391 6500     		.ascii	"e\000"
 2307 0393 01       		.byte	0x1
 2308 0394 A1       		.byte	0xa1
 2309 0395 D9000000 		.4byte	0xd9
 2310 0399 02       		.uleb128 0x2
 2311 039a 91       		.byte	0x91
 2312 039b 54       		.sleb128 -44
 2313 039c 0B       		.uleb128 0xb
 2314 039d 09030000 		.4byte	.LASF39
 2315 03a1 01       		.byte	0x1
 2316 03a2 AA       		.byte	0xaa
 2317 03a3 D9000000 		.4byte	0xd9
 2318 03a7 02       		.uleb128 0x2
 2319 03a8 91       		.byte	0x91
 2320 03a9 50       		.sleb128 -48
 2321 03aa 0B       		.uleb128 0xb
 2322 03ab 9A010000 		.4byte	.LASF40
 2323 03af 01       		.byte	0x1
 2324 03b0 AB       		.byte	0xab
 2325 03b1 D9000000 		.4byte	0xd9
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 52


 2326 03b5 02       		.uleb128 0x2
 2327 03b6 91       		.byte	0x91
 2328 03b7 4C       		.sleb128 -52
 2329 03b8 0C       		.uleb128 0xc
 2330 03b9 7500     		.ascii	"u\000"
 2331 03bb 01       		.byte	0x1
 2332 03bc AC       		.byte	0xac
 2333 03bd D9000000 		.4byte	0xd9
 2334 03c1 02       		.uleb128 0x2
 2335 03c2 91       		.byte	0x91
 2336 03c3 48       		.sleb128 -56
 2337 03c4 0B       		.uleb128 0xb
 2338 03c5 5F030000 		.4byte	.LASF41
 2339 03c9 01       		.byte	0x1
 2340 03ca AE       		.byte	0xae
 2341 03cb E7030000 		.4byte	0x3e7
 2342 03cf 02       		.uleb128 0x2
 2343 03d0 91       		.byte	0x91
 2344 03d1 47       		.sleb128 -57
 2345 03d2 0B       		.uleb128 0xb
 2346 03d3 92030000 		.4byte	.LASF42
 2347 03d7 01       		.byte	0x1
 2348 03d8 AF       		.byte	0xaf
 2349 03d9 E7030000 		.4byte	0x3e7
 2350 03dd 02       		.uleb128 0x2
 2351 03de 91       		.byte	0x91
 2352 03df 46       		.sleb128 -58
 2353 03e0 00       		.byte	0
 2354 03e1 11       		.uleb128 0x11
 2355 03e2 04       		.byte	0x4
 2356 03e3 2A010000 		.4byte	0x12a
 2357 03e7 03       		.uleb128 0x3
 2358 03e8 01       		.byte	0x1
 2359 03e9 02       		.byte	0x2
 2360 03ea E8020000 		.4byte	.LASF43
 2361 03ee 12       		.uleb128 0x12
 2362 03ef EE000000 		.4byte	.LASF70
 2363 03f3 01       		.byte	0x1
 2364 03f4 BC       		.byte	0xbc
 2365 03f5 94000000 		.4byte	0x94
 2366 03f9 00000000 		.4byte	.LFB69
 2367 03fd AC050000 		.4byte	.LFE69-.LFB69
 2368 0401 01       		.uleb128 0x1
 2369 0402 9C       		.byte	0x9c
 2370 0403 25050000 		.4byte	0x525
 2371 0407 0B       		.uleb128 0xb
 2372 0408 C2020000 		.4byte	.LASF44
 2373 040c 01       		.byte	0x1
 2374 040d DA       		.byte	0xda
 2375 040e 94000000 		.4byte	0x94
 2376 0412 02       		.uleb128 0x2
 2377 0413 91       		.byte	0x91
 2378 0414 6C       		.sleb128 -20
 2379 0415 0C       		.uleb128 0xc
 2380 0416 706900   		.ascii	"pi\000"
 2381 0419 01       		.byte	0x1
 2382 041a DF       		.byte	0xdf
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 53


 2383 041b 2A010000 		.4byte	0x12a
 2384 041f 02       		.uleb128 0x2
 2385 0420 91       		.byte	0x91
 2386 0421 44       		.sleb128 -60
 2387 0422 0B       		.uleb128 0xb
 2388 0423 7F020000 		.4byte	.LASF45
 2389 0427 01       		.byte	0x1
 2390 0428 ED       		.byte	0xed
 2391 0429 3A050000 		.4byte	0x53a
 2392 042d 03       		.uleb128 0x3
 2393 042e 91       		.byte	0x91
 2394 042f A47F     		.sleb128 -92
 2395 0431 13       		.uleb128 0x13
 2396 0432 2F000000 		.4byte	.LASF46
 2397 0436 01       		.byte	0x1
 2398 0437 0F01     		.2byte	0x10f
 2399 0439 A2000000 		.4byte	0xa2
 2400 043d 02       		.uleb128 0x2
 2401 043e 91       		.byte	0x91
 2402 043f 5F       		.sleb128 -33
 2403 0440 14       		.uleb128 0x14
 2404 0441 6900     		.ascii	"i\000"
 2405 0443 01       		.byte	0x1
 2406 0444 1601     		.2byte	0x116
 2407 0446 A2000000 		.4byte	0xa2
 2408 044a 02       		.uleb128 0x2
 2409 044b 91       		.byte	0x91
 2410 044c 6B       		.sleb128 -21
 2411 044d 13       		.uleb128 0x13
 2412 044e B7030000 		.4byte	.LASF47
 2413 0452 01       		.byte	0x1
 2414 0453 1701     		.2byte	0x117
 2415 0455 C3000000 		.4byte	0xc3
 2416 0459 02       		.uleb128 0x2
 2417 045a 91       		.byte	0x91
 2418 045b 64       		.sleb128 -28
 2419 045c 13       		.uleb128 0x13
 2420 045d 17000000 		.4byte	.LASF48
 2421 0461 01       		.byte	0x1
 2422 0462 1901     		.2byte	0x119
 2423 0464 A2000000 		.4byte	0xa2
 2424 0468 02       		.uleb128 0x2
 2425 0469 91       		.byte	0x91
 2426 046a 63       		.sleb128 -29
 2427 046b 13       		.uleb128 0x13
 2428 046c 49000000 		.4byte	.LASF49
 2429 0470 01       		.byte	0x1
 2430 0471 1A01     		.2byte	0x11a
 2431 0473 A2000000 		.4byte	0xa2
 2432 0477 02       		.uleb128 0x2
 2433 0478 91       		.byte	0x91
 2434 0479 62       		.sleb128 -30
 2435 047a 13       		.uleb128 0x13
 2436 047b CC030000 		.4byte	.LASF50
 2437 047f 01       		.byte	0x1
 2438 0480 1B01     		.2byte	0x11b
 2439 0482 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 54


 2440 0486 02       		.uleb128 0x2
 2441 0487 91       		.byte	0x91
 2442 0488 61       		.sleb128 -31
 2443 0489 13       		.uleb128 0x13
 2444 048a C5010000 		.4byte	.LASF51
 2445 048e 01       		.byte	0x1
 2446 048f 1C01     		.2byte	0x11c
 2447 0491 A2000000 		.4byte	0xa2
 2448 0495 02       		.uleb128 0x2
 2449 0496 91       		.byte	0x91
 2450 0497 60       		.sleb128 -32
 2451 0498 0A       		.uleb128 0xa
 2452 0499 04010000 		.4byte	.LBB3
 2453 049d 8E040000 		.4byte	.LBE3-.LBB3
 2454 04a1 13       		.uleb128 0x13
 2455 04a2 29000000 		.4byte	.LASF32
 2456 04a6 01       		.byte	0x1
 2457 04a7 2901     		.2byte	0x129
 2458 04a9 B8000000 		.4byte	0xb8
 2459 04ad 03       		.uleb128 0x3
 2460 04ae 91       		.byte	0x91
 2461 04af A27F     		.sleb128 -94
 2462 04b1 13       		.uleb128 0x13
 2463 04b2 63010000 		.4byte	.LASF33
 2464 04b6 01       		.byte	0x1
 2465 04b7 2901     		.2byte	0x129
 2466 04b9 B8000000 		.4byte	0xb8
 2467 04bd 03       		.uleb128 0x3
 2468 04be 91       		.byte	0x91
 2469 04bf A07F     		.sleb128 -96
 2470 04c1 13       		.uleb128 0x13
 2471 04c2 5B020000 		.4byte	.LASF34
 2472 04c6 01       		.byte	0x1
 2473 04c7 2901     		.2byte	0x129
 2474 04c9 B8000000 		.4byte	0xb8
 2475 04cd 03       		.uleb128 0x3
 2476 04ce 91       		.byte	0x91
 2477 04cf 9E7F     		.sleb128 -98
 2478 04d1 15       		.uleb128 0x15
 2479 04d2 60010000 		.4byte	.LBB4
 2480 04d6 72000000 		.4byte	.LBE4-.LBB4
 2481 04da 0A050000 		.4byte	0x50a
 2482 04de 13       		.uleb128 0x13
 2483 04df E2020000 		.4byte	.LASF52
 2484 04e3 01       		.byte	0x1
 2485 04e4 7B01     		.2byte	0x17b
 2486 04e6 94000000 		.4byte	0x94
 2487 04ea 02       		.uleb128 0x2
 2488 04eb 91       		.byte	0x91
 2489 04ec 58       		.sleb128 -40
 2490 04ed 14       		.uleb128 0x14
 2491 04ee 563100   		.ascii	"V1\000"
 2492 04f1 01       		.byte	0x1
 2493 04f2 7E01     		.2byte	0x17e
 2494 04f4 B8000000 		.4byte	0xb8
 2495 04f8 02       		.uleb128 0x2
 2496 04f9 91       		.byte	0x91
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 55


 2497 04fa 56       		.sleb128 -42
 2498 04fb 14       		.uleb128 0x14
 2499 04fc 563200   		.ascii	"V2\000"
 2500 04ff 01       		.byte	0x1
 2501 0500 8001     		.2byte	0x180
 2502 0502 B8000000 		.4byte	0xb8
 2503 0506 02       		.uleb128 0x2
 2504 0507 91       		.byte	0x91
 2505 0508 54       		.sleb128 -44
 2506 0509 00       		.byte	0
 2507 050a 0A       		.uleb128 0xa
 2508 050b C2040000 		.4byte	.LBB5
 2509 050f 1A000000 		.4byte	.LBE5-.LBB5
 2510 0513 13       		.uleb128 0x13
 2511 0514 E2020000 		.4byte	.LASF52
 2512 0518 01       		.byte	0x1
 2513 0519 1602     		.2byte	0x216
 2514 051b 94000000 		.4byte	0x94
 2515 051f 02       		.uleb128 0x2
 2516 0520 91       		.byte	0x91
 2517 0521 50       		.sleb128 -48
 2518 0522 00       		.byte	0
 2519 0523 00       		.byte	0
 2520 0524 00       		.byte	0
 2521 0525 16       		.uleb128 0x16
 2522 0526 35050000 		.4byte	0x535
 2523 052a 35050000 		.4byte	0x535
 2524 052e 17       		.uleb128 0x17
 2525 052f F5000000 		.4byte	0xf5
 2526 0533 1E       		.byte	0x1e
 2527 0534 00       		.byte	0
 2528 0535 18       		.uleb128 0x18
 2529 0536 AD000000 		.4byte	0xad
 2530 053a 18       		.uleb128 0x18
 2531 053b 25050000 		.4byte	0x525
 2532 053f 0B       		.uleb128 0xb
 2533 0540 B8010000 		.4byte	.LASF53
 2534 0544 01       		.byte	0x1
 2535 0545 38       		.byte	0x38
 2536 0546 AD000000 		.4byte	0xad
 2537 054a 05       		.uleb128 0x5
 2538 054b 03       		.byte	0x3
 2539 054c 00000000 		.4byte	sen1_on_line
 2540 0550 0B       		.uleb128 0xb
 2541 0551 E5010000 		.4byte	.LASF54
 2542 0555 01       		.byte	0x1
 2543 0556 38       		.byte	0x38
 2544 0557 AD000000 		.4byte	0xad
 2545 055b 05       		.uleb128 0x5
 2546 055c 03       		.byte	0x3
 2547 055d 01000000 		.4byte	sen2_on_line
 2548 0561 0B       		.uleb128 0xb
 2549 0562 11020000 		.4byte	.LASF55
 2550 0566 01       		.byte	0x1
 2551 0567 38       		.byte	0x38
 2552 0568 AD000000 		.4byte	0xad
 2553 056c 05       		.uleb128 0x5
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 56


 2554 056d 03       		.byte	0x3
 2555 056e 02000000 		.4byte	sen3_on_line
 2556 0572 0B       		.uleb128 0xb
 2557 0573 41020000 		.4byte	.LASF56
 2558 0577 01       		.byte	0x1
 2559 0578 39       		.byte	0x39
 2560 0579 AD000000 		.4byte	0xad
 2561 057d 05       		.uleb128 0x5
 2562 057e 03       		.byte	0x3
 2563 057f 03000000 		.4byte	sen4_on_line
 2564 0583 0B       		.uleb128 0xb
 2565 0584 6A020000 		.4byte	.LASF57
 2566 0588 01       		.byte	0x1
 2567 0589 39       		.byte	0x39
 2568 058a AD000000 		.4byte	0xad
 2569 058e 05       		.uleb128 0x5
 2570 058f 03       		.byte	0x3
 2571 0590 04000000 		.4byte	sen5_on_line
 2572 0594 0B       		.uleb128 0xb
 2573 0595 9D020000 		.4byte	.LASF58
 2574 0599 01       		.byte	0x1
 2575 059a 39       		.byte	0x39
 2576 059b AD000000 		.4byte	0xad
 2577 059f 05       		.uleb128 0x5
 2578 05a0 03       		.byte	0x3
 2579 05a1 05000000 		.4byte	sen6_on_line
 2580 05a5 0B       		.uleb128 0xb
 2581 05a6 86030000 		.4byte	.LASF59
 2582 05aa 01       		.byte	0x1
 2583 05ab 3C       		.byte	0x3c
 2584 05ac FC000000 		.4byte	0xfc
 2585 05b0 05       		.uleb128 0x5
 2586 05b1 03       		.byte	0x3
 2587 05b2 06000000 		.4byte	g_direction
 2588 05b6 0B       		.uleb128 0xb
 2589 05b7 F2010000 		.4byte	.LASF60
 2590 05bb 01       		.byte	0x1
 2591 05bc 3D       		.byte	0x3d
 2592 05bd FC000000 		.4byte	0xfc
 2593 05c1 05       		.uleb128 0x5
 2594 05c2 03       		.byte	0x3
 2595 05c3 07000000 		.4byte	g_stop_now
 2596 05c7 0B       		.uleb128 0xb
 2597 05c8 A0030000 		.4byte	.LASF61
 2598 05cc 01       		.byte	0x1
 2599 05cd 3E       		.byte	0x3e
 2600 05ce D8050000 		.4byte	0x5d8
 2601 05d2 05       		.uleb128 0x5
 2602 05d3 03       		.byte	0x3
 2603 05d4 08000000 		.4byte	g_dist_mm
 2604 05d8 05       		.uleb128 0x5
 2605 05d9 C3000000 		.4byte	0xc3
 2606 05dd 0B       		.uleb128 0xb
 2607 05de F9020000 		.4byte	.LASF62
 2608 05e2 01       		.byte	0x1
 2609 05e3 41       		.byte	0x41
 2610 05e4 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 57


 2611 05e8 05       		.uleb128 0x5
 2612 05e9 03       		.byte	0x3
 2613 05ea 0C000000 		.4byte	dir_delay_ticks
 2614 05ee 0B       		.uleb128 0xb
 2615 05ef 06000000 		.4byte	.LASF63
 2616 05f3 01       		.byte	0x1
 2617 05f4 42       		.byte	0x42
 2618 05f5 AD000000 		.4byte	0xad
 2619 05f9 05       		.uleb128 0x5
 2620 05fa 03       		.byte	0x3
 2621 05fb 0E000000 		.4byte	dir_latched_side
 2622 05ff 0B       		.uleb128 0xb
 2623 0600 FD010000 		.4byte	.LASF64
 2624 0604 01       		.byte	0x1
 2625 0605 45       		.byte	0x45
 2626 0606 B8000000 		.4byte	0xb8
 2627 060a 05       		.uleb128 0x5
 2628 060b 03       		.byte	0x3
 2629 060c 10000000 		.4byte	turn_cooldown_ticks
 2630 0610 19       		.uleb128 0x19
 2631 0611 AA030000 		.4byte	.LASF71
 2632 0615 04       		.byte	0x4
 2633 0616 1207     		.2byte	0x712
 2634 0618 D8050000 		.4byte	0x5d8
 2635 061c 00       		.byte	0
 2636              		.section	.debug_abbrev,"",%progbits
 2637              	.Ldebug_abbrev0:
 2638 0000 01       		.uleb128 0x1
 2639 0001 11       		.uleb128 0x11
 2640 0002 01       		.byte	0x1
 2641 0003 25       		.uleb128 0x25
 2642 0004 0E       		.uleb128 0xe
 2643 0005 13       		.uleb128 0x13
 2644 0006 0B       		.uleb128 0xb
 2645 0007 03       		.uleb128 0x3
 2646 0008 0E       		.uleb128 0xe
 2647 0009 1B       		.uleb128 0x1b
 2648 000a 0E       		.uleb128 0xe
 2649 000b 55       		.uleb128 0x55
 2650 000c 17       		.uleb128 0x17
 2651 000d 11       		.uleb128 0x11
 2652 000e 01       		.uleb128 0x1
 2653 000f 10       		.uleb128 0x10
 2654 0010 17       		.uleb128 0x17
 2655 0011 00       		.byte	0
 2656 0012 00       		.byte	0
 2657 0013 02       		.uleb128 0x2
 2658 0014 16       		.uleb128 0x16
 2659 0015 00       		.byte	0
 2660 0016 03       		.uleb128 0x3
 2661 0017 0E       		.uleb128 0xe
 2662 0018 3A       		.uleb128 0x3a
 2663 0019 0B       		.uleb128 0xb
 2664 001a 3B       		.uleb128 0x3b
 2665 001b 0B       		.uleb128 0xb
 2666 001c 49       		.uleb128 0x49
 2667 001d 13       		.uleb128 0x13
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 58


 2668 001e 00       		.byte	0
 2669 001f 00       		.byte	0
 2670 0020 03       		.uleb128 0x3
 2671 0021 24       		.uleb128 0x24
 2672 0022 00       		.byte	0
 2673 0023 0B       		.uleb128 0xb
 2674 0024 0B       		.uleb128 0xb
 2675 0025 3E       		.uleb128 0x3e
 2676 0026 0B       		.uleb128 0xb
 2677 0027 03       		.uleb128 0x3
 2678 0028 0E       		.uleb128 0xe
 2679 0029 00       		.byte	0
 2680 002a 00       		.byte	0
 2681 002b 04       		.uleb128 0x4
 2682 002c 24       		.uleb128 0x24
 2683 002d 00       		.byte	0
 2684 002e 0B       		.uleb128 0xb
 2685 002f 0B       		.uleb128 0xb
 2686 0030 3E       		.uleb128 0x3e
 2687 0031 0B       		.uleb128 0xb
 2688 0032 03       		.uleb128 0x3
 2689 0033 08       		.uleb128 0x8
 2690 0034 00       		.byte	0
 2691 0035 00       		.byte	0
 2692 0036 05       		.uleb128 0x5
 2693 0037 35       		.uleb128 0x35
 2694 0038 00       		.byte	0
 2695 0039 49       		.uleb128 0x49
 2696 003a 13       		.uleb128 0x13
 2697 003b 00       		.byte	0
 2698 003c 00       		.byte	0
 2699 003d 06       		.uleb128 0x6
 2700 003e 13       		.uleb128 0x13
 2701 003f 01       		.byte	0x1
 2702 0040 0B       		.uleb128 0xb
 2703 0041 0B       		.uleb128 0xb
 2704 0042 3A       		.uleb128 0x3a
 2705 0043 0B       		.uleb128 0xb
 2706 0044 3B       		.uleb128 0x3b
 2707 0045 0B       		.uleb128 0xb
 2708 0046 01       		.uleb128 0x1
 2709 0047 13       		.uleb128 0x13
 2710 0048 00       		.byte	0
 2711 0049 00       		.byte	0
 2712 004a 07       		.uleb128 0x7
 2713 004b 0D       		.uleb128 0xd
 2714 004c 00       		.byte	0
 2715 004d 03       		.uleb128 0x3
 2716 004e 08       		.uleb128 0x8
 2717 004f 3A       		.uleb128 0x3a
 2718 0050 0B       		.uleb128 0xb
 2719 0051 3B       		.uleb128 0x3b
 2720 0052 0B       		.uleb128 0xb
 2721 0053 49       		.uleb128 0x49
 2722 0054 13       		.uleb128 0x13
 2723 0055 38       		.uleb128 0x38
 2724 0056 0B       		.uleb128 0xb
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 59


 2725 0057 00       		.byte	0
 2726 0058 00       		.byte	0
 2727 0059 08       		.uleb128 0x8
 2728 005a 0D       		.uleb128 0xd
 2729 005b 00       		.byte	0
 2730 005c 03       		.uleb128 0x3
 2731 005d 0E       		.uleb128 0xe
 2732 005e 3A       		.uleb128 0x3a
 2733 005f 0B       		.uleb128 0xb
 2734 0060 3B       		.uleb128 0x3b
 2735 0061 0B       		.uleb128 0xb
 2736 0062 49       		.uleb128 0x49
 2737 0063 13       		.uleb128 0x13
 2738 0064 38       		.uleb128 0x38
 2739 0065 0B       		.uleb128 0xb
 2740 0066 00       		.byte	0
 2741 0067 00       		.byte	0
 2742 0068 09       		.uleb128 0x9
 2743 0069 2E       		.uleb128 0x2e
 2744 006a 01       		.byte	0x1
 2745 006b 3F       		.uleb128 0x3f
 2746 006c 19       		.uleb128 0x19
 2747 006d 03       		.uleb128 0x3
 2748 006e 0E       		.uleb128 0xe
 2749 006f 3A       		.uleb128 0x3a
 2750 0070 0B       		.uleb128 0xb
 2751 0071 3B       		.uleb128 0x3b
 2752 0072 0B       		.uleb128 0xb
 2753 0073 27       		.uleb128 0x27
 2754 0074 19       		.uleb128 0x19
 2755 0075 11       		.uleb128 0x11
 2756 0076 01       		.uleb128 0x1
 2757 0077 12       		.uleb128 0x12
 2758 0078 06       		.uleb128 0x6
 2759 0079 40       		.uleb128 0x40
 2760 007a 18       		.uleb128 0x18
 2761 007b 9642     		.uleb128 0x2116
 2762 007d 19       		.uleb128 0x19
 2763 007e 01       		.uleb128 0x1
 2764 007f 13       		.uleb128 0x13
 2765 0080 00       		.byte	0
 2766 0081 00       		.byte	0
 2767 0082 0A       		.uleb128 0xa
 2768 0083 0B       		.uleb128 0xb
 2769 0084 01       		.byte	0x1
 2770 0085 11       		.uleb128 0x11
 2771 0086 01       		.uleb128 0x1
 2772 0087 12       		.uleb128 0x12
 2773 0088 06       		.uleb128 0x6
 2774 0089 00       		.byte	0
 2775 008a 00       		.byte	0
 2776 008b 0B       		.uleb128 0xb
 2777 008c 34       		.uleb128 0x34
 2778 008d 00       		.byte	0
 2779 008e 03       		.uleb128 0x3
 2780 008f 0E       		.uleb128 0xe
 2781 0090 3A       		.uleb128 0x3a
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 60


 2782 0091 0B       		.uleb128 0xb
 2783 0092 3B       		.uleb128 0x3b
 2784 0093 0B       		.uleb128 0xb
 2785 0094 49       		.uleb128 0x49
 2786 0095 13       		.uleb128 0x13
 2787 0096 02       		.uleb128 0x2
 2788 0097 18       		.uleb128 0x18
 2789 0098 00       		.byte	0
 2790 0099 00       		.byte	0
 2791 009a 0C       		.uleb128 0xc
 2792 009b 34       		.uleb128 0x34
 2793 009c 00       		.byte	0
 2794 009d 03       		.uleb128 0x3
 2795 009e 08       		.uleb128 0x8
 2796 009f 3A       		.uleb128 0x3a
 2797 00a0 0B       		.uleb128 0xb
 2798 00a1 3B       		.uleb128 0x3b
 2799 00a2 0B       		.uleb128 0xb
 2800 00a3 49       		.uleb128 0x49
 2801 00a4 13       		.uleb128 0x13
 2802 00a5 02       		.uleb128 0x2
 2803 00a6 18       		.uleb128 0x18
 2804 00a7 00       		.byte	0
 2805 00a8 00       		.byte	0
 2806 00a9 0D       		.uleb128 0xd
 2807 00aa 2E       		.uleb128 0x2e
 2808 00ab 01       		.byte	0x1
 2809 00ac 03       		.uleb128 0x3
 2810 00ad 0E       		.uleb128 0xe
 2811 00ae 3A       		.uleb128 0x3a
 2812 00af 0B       		.uleb128 0xb
 2813 00b0 3B       		.uleb128 0x3b
 2814 00b1 0B       		.uleb128 0xb
 2815 00b2 27       		.uleb128 0x27
 2816 00b3 19       		.uleb128 0x19
 2817 00b4 49       		.uleb128 0x49
 2818 00b5 13       		.uleb128 0x13
 2819 00b6 11       		.uleb128 0x11
 2820 00b7 01       		.uleb128 0x1
 2821 00b8 12       		.uleb128 0x12
 2822 00b9 06       		.uleb128 0x6
 2823 00ba 40       		.uleb128 0x40
 2824 00bb 18       		.uleb128 0x18
 2825 00bc 9642     		.uleb128 0x2116
 2826 00be 19       		.uleb128 0x19
 2827 00bf 01       		.uleb128 0x1
 2828 00c0 13       		.uleb128 0x13
 2829 00c1 00       		.byte	0
 2830 00c2 00       		.byte	0
 2831 00c3 0E       		.uleb128 0xe
 2832 00c4 05       		.uleb128 0x5
 2833 00c5 00       		.byte	0
 2834 00c6 03       		.uleb128 0x3
 2835 00c7 08       		.uleb128 0x8
 2836 00c8 3A       		.uleb128 0x3a
 2837 00c9 0B       		.uleb128 0xb
 2838 00ca 3B       		.uleb128 0x3b
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 61


 2839 00cb 0B       		.uleb128 0xb
 2840 00cc 49       		.uleb128 0x49
 2841 00cd 13       		.uleb128 0x13
 2842 00ce 02       		.uleb128 0x2
 2843 00cf 18       		.uleb128 0x18
 2844 00d0 00       		.byte	0
 2845 00d1 00       		.byte	0
 2846 00d2 0F       		.uleb128 0xf
 2847 00d3 2E       		.uleb128 0x2e
 2848 00d4 01       		.byte	0x1
 2849 00d5 03       		.uleb128 0x3
 2850 00d6 0E       		.uleb128 0xe
 2851 00d7 3A       		.uleb128 0x3a
 2852 00d8 0B       		.uleb128 0xb
 2853 00d9 3B       		.uleb128 0x3b
 2854 00da 0B       		.uleb128 0xb
 2855 00db 27       		.uleb128 0x27
 2856 00dc 19       		.uleb128 0x19
 2857 00dd 11       		.uleb128 0x11
 2858 00de 01       		.uleb128 0x1
 2859 00df 12       		.uleb128 0x12
 2860 00e0 06       		.uleb128 0x6
 2861 00e1 40       		.uleb128 0x40
 2862 00e2 18       		.uleb128 0x18
 2863 00e3 9642     		.uleb128 0x2116
 2864 00e5 19       		.uleb128 0x19
 2865 00e6 01       		.uleb128 0x1
 2866 00e7 13       		.uleb128 0x13
 2867 00e8 00       		.byte	0
 2868 00e9 00       		.byte	0
 2869 00ea 10       		.uleb128 0x10
 2870 00eb 05       		.uleb128 0x5
 2871 00ec 00       		.byte	0
 2872 00ed 03       		.uleb128 0x3
 2873 00ee 0E       		.uleb128 0xe
 2874 00ef 3A       		.uleb128 0x3a
 2875 00f0 0B       		.uleb128 0xb
 2876 00f1 3B       		.uleb128 0x3b
 2877 00f2 0B       		.uleb128 0xb
 2878 00f3 49       		.uleb128 0x49
 2879 00f4 13       		.uleb128 0x13
 2880 00f5 02       		.uleb128 0x2
 2881 00f6 18       		.uleb128 0x18
 2882 00f7 00       		.byte	0
 2883 00f8 00       		.byte	0
 2884 00f9 11       		.uleb128 0x11
 2885 00fa 0F       		.uleb128 0xf
 2886 00fb 00       		.byte	0
 2887 00fc 0B       		.uleb128 0xb
 2888 00fd 0B       		.uleb128 0xb
 2889 00fe 49       		.uleb128 0x49
 2890 00ff 13       		.uleb128 0x13
 2891 0100 00       		.byte	0
 2892 0101 00       		.byte	0
 2893 0102 12       		.uleb128 0x12
 2894 0103 2E       		.uleb128 0x2e
 2895 0104 01       		.byte	0x1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 62


 2896 0105 3F       		.uleb128 0x3f
 2897 0106 19       		.uleb128 0x19
 2898 0107 03       		.uleb128 0x3
 2899 0108 0E       		.uleb128 0xe
 2900 0109 3A       		.uleb128 0x3a
 2901 010a 0B       		.uleb128 0xb
 2902 010b 3B       		.uleb128 0x3b
 2903 010c 0B       		.uleb128 0xb
 2904 010d 27       		.uleb128 0x27
 2905 010e 19       		.uleb128 0x19
 2906 010f 49       		.uleb128 0x49
 2907 0110 13       		.uleb128 0x13
 2908 0111 11       		.uleb128 0x11
 2909 0112 01       		.uleb128 0x1
 2910 0113 12       		.uleb128 0x12
 2911 0114 06       		.uleb128 0x6
 2912 0115 40       		.uleb128 0x40
 2913 0116 18       		.uleb128 0x18
 2914 0117 9642     		.uleb128 0x2116
 2915 0119 19       		.uleb128 0x19
 2916 011a 01       		.uleb128 0x1
 2917 011b 13       		.uleb128 0x13
 2918 011c 00       		.byte	0
 2919 011d 00       		.byte	0
 2920 011e 13       		.uleb128 0x13
 2921 011f 34       		.uleb128 0x34
 2922 0120 00       		.byte	0
 2923 0121 03       		.uleb128 0x3
 2924 0122 0E       		.uleb128 0xe
 2925 0123 3A       		.uleb128 0x3a
 2926 0124 0B       		.uleb128 0xb
 2927 0125 3B       		.uleb128 0x3b
 2928 0126 05       		.uleb128 0x5
 2929 0127 49       		.uleb128 0x49
 2930 0128 13       		.uleb128 0x13
 2931 0129 02       		.uleb128 0x2
 2932 012a 18       		.uleb128 0x18
 2933 012b 00       		.byte	0
 2934 012c 00       		.byte	0
 2935 012d 14       		.uleb128 0x14
 2936 012e 34       		.uleb128 0x34
 2937 012f 00       		.byte	0
 2938 0130 03       		.uleb128 0x3
 2939 0131 08       		.uleb128 0x8
 2940 0132 3A       		.uleb128 0x3a
 2941 0133 0B       		.uleb128 0xb
 2942 0134 3B       		.uleb128 0x3b
 2943 0135 05       		.uleb128 0x5
 2944 0136 49       		.uleb128 0x49
 2945 0137 13       		.uleb128 0x13
 2946 0138 02       		.uleb128 0x2
 2947 0139 18       		.uleb128 0x18
 2948 013a 00       		.byte	0
 2949 013b 00       		.byte	0
 2950 013c 15       		.uleb128 0x15
 2951 013d 0B       		.uleb128 0xb
 2952 013e 01       		.byte	0x1
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 63


 2953 013f 11       		.uleb128 0x11
 2954 0140 01       		.uleb128 0x1
 2955 0141 12       		.uleb128 0x12
 2956 0142 06       		.uleb128 0x6
 2957 0143 01       		.uleb128 0x1
 2958 0144 13       		.uleb128 0x13
 2959 0145 00       		.byte	0
 2960 0146 00       		.byte	0
 2961 0147 16       		.uleb128 0x16
 2962 0148 01       		.uleb128 0x1
 2963 0149 01       		.byte	0x1
 2964 014a 49       		.uleb128 0x49
 2965 014b 13       		.uleb128 0x13
 2966 014c 01       		.uleb128 0x1
 2967 014d 13       		.uleb128 0x13
 2968 014e 00       		.byte	0
 2969 014f 00       		.byte	0
 2970 0150 17       		.uleb128 0x17
 2971 0151 21       		.uleb128 0x21
 2972 0152 00       		.byte	0
 2973 0153 49       		.uleb128 0x49
 2974 0154 13       		.uleb128 0x13
 2975 0155 2F       		.uleb128 0x2f
 2976 0156 0B       		.uleb128 0xb
 2977 0157 00       		.byte	0
 2978 0158 00       		.byte	0
 2979 0159 18       		.uleb128 0x18
 2980 015a 26       		.uleb128 0x26
 2981 015b 00       		.byte	0
 2982 015c 49       		.uleb128 0x49
 2983 015d 13       		.uleb128 0x13
 2984 015e 00       		.byte	0
 2985 015f 00       		.byte	0
 2986 0160 19       		.uleb128 0x19
 2987 0161 34       		.uleb128 0x34
 2988 0162 00       		.byte	0
 2989 0163 03       		.uleb128 0x3
 2990 0164 0E       		.uleb128 0xe
 2991 0165 3A       		.uleb128 0x3a
 2992 0166 0B       		.uleb128 0xb
 2993 0167 3B       		.uleb128 0x3b
 2994 0168 05       		.uleb128 0x5
 2995 0169 49       		.uleb128 0x49
 2996 016a 13       		.uleb128 0x13
 2997 016b 3F       		.uleb128 0x3f
 2998 016c 19       		.uleb128 0x19
 2999 016d 3C       		.uleb128 0x3c
 3000 016e 19       		.uleb128 0x19
 3001 016f 00       		.byte	0
 3002 0170 00       		.byte	0
 3003 0171 00       		.byte	0
 3004              		.section	.debug_aranges,"",%progbits
 3005 0000 44000000 		.4byte	0x44
 3006 0004 0200     		.2byte	0x2
 3007 0006 00000000 		.4byte	.Ldebug_info0
 3008 000a 04       		.byte	0x4
 3009 000b 00       		.byte	0
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 64


 3010 000c 0000     		.2byte	0
 3011 000e 0000     		.2byte	0
 3012 0010 00000000 		.4byte	.LFB64
 3013 0014 14010000 		.4byte	.LFE64-.LFB64
 3014 0018 00000000 		.4byte	.LFB65
 3015 001c 44000000 		.4byte	.LFE65-.LFB65
 3016 0020 00000000 		.4byte	.LFB66
 3017 0024 48010000 		.4byte	.LFE66-.LFB66
 3018 0028 00000000 		.4byte	.LFB67
 3019 002c 3A000000 		.4byte	.LFE67-.LFB67
 3020 0030 00000000 		.4byte	.LFB68
 3021 0034 88020000 		.4byte	.LFE68-.LFB68
 3022 0038 00000000 		.4byte	.LFB69
 3023 003c AC050000 		.4byte	.LFE69-.LFB69
 3024 0040 00000000 		.4byte	0
 3025 0044 00000000 		.4byte	0
 3026              		.section	.debug_ranges,"",%progbits
 3027              	.Ldebug_ranges0:
 3028 0000 00000000 		.4byte	.LFB64
 3029 0004 14010000 		.4byte	.LFE64
 3030 0008 00000000 		.4byte	.LFB65
 3031 000c 44000000 		.4byte	.LFE65
 3032 0010 00000000 		.4byte	.LFB66
 3033 0014 48010000 		.4byte	.LFE66
 3034 0018 00000000 		.4byte	.LFB67
 3035 001c 3A000000 		.4byte	.LFE67
 3036 0020 00000000 		.4byte	.LFB68
 3037 0024 88020000 		.4byte	.LFE68
 3038 0028 00000000 		.4byte	.LFB69
 3039 002c AC050000 		.4byte	.LFE69
 3040 0030 00000000 		.4byte	0
 3041 0034 00000000 		.4byte	0
 3042              		.section	.debug_line,"",%progbits
 3043              	.Ldebug_line0:
 3044 0000 A1040000 		.section	.debug_str,"MS",%progbits,1
 3044      02003F01 
 3044      00000201 
 3044      FB0E0D00 
 3044      01010101 
 3045              	.LASF38:
 3046 0000 76616C69 		.ascii	"valid\000"
 3046      6400
 3047              	.LASF63:
 3048 0006 6469725F 		.ascii	"dir_latched_side\000"
 3048      6C617463 
 3048      6865645F 
 3048      73696465 
 3048      00
 3049              	.LASF48:
 3050 0017 73747261 		.ascii	"straight_complete\000"
 3050      69676874 
 3050      5F636F6D 
 3050      706C6574 
 3050      6500
 3051              	.LASF32:
 3052 0029 56345F70 		.ascii	"V4_pp\000"
 3052      7000
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 65


 3053              	.LASF46:
 3054 002f 696E6465 		.ascii	"indexMAX\000"
 3054      784D4158 
 3054      00
 3055              	.LASF14:
 3056 0038 696E7438 		.ascii	"int8_t\000"
 3056      5F7400
 3057              	.LASF4:
 3058 003f 73686F72 		.ascii	"short int\000"
 3058      7420696E 
 3058      7400
 3059              	.LASF49:
 3060 0049 7475726E 		.ascii	"turn_complete\000"
 3060      5F636F6D 
 3060      706C6574 
 3060      6500
 3061              	.LASF23:
 3062 0057 73697A65 		.ascii	"sizetype\000"
 3062      74797065 
 3062      00
 3063              	.LASF65:
 3064 0060 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3064      43313120 
 3064      352E342E 
 3064      31203230 
 3064      31363036 
 3065 0093 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3065      20726576 
 3065      6973696F 
 3065      6E203233 
 3065      37373135 
 3066 00c6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3066      66756E63 
 3066      74696F6E 
 3066      2D736563 
 3066      74696F6E 
 3067              	.LASF70:
 3068 00ee 6D61696E 		.ascii	"main\000"
 3068      00
 3069              	.LASF5:
 3070 00f3 5F5F7569 		.ascii	"__uint16_t\000"
 3070      6E743136 
 3070      5F7400
 3071              	.LASF18:
 3072 00fe 696E7436 		.ascii	"int64_t\000"
 3072      345F7400 
 3073              	.LASF15:
 3074 0106 75696E74 		.ascii	"uint8_t\000"
 3074      385F7400 
 3075              	.LASF27:
 3076 010e 72617732 		.ascii	"raw2\000"
 3076      00
 3077              	.LASF30:
 3078 0113 646D6D5F 		.ascii	"dmm_abs\000"
 3078      61627300 
 3079              	.LASF67:
 3080 011b 433A5C55 		.ascii	"C:\\Users\\yram171\\Downloads\\Compsys-301-CODE\\YA"
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 66


 3080      73657273 
 3080      5C797261 
 3080      6D313731 
 3080      5C446F77 
 3081 0149 53482043 		.ascii	"SH Code\\CS301_Class.cydsn\000"
 3081      6F64655C 
 3081      43533330 
 3081      315F436C 
 3081      6173732E 
 3082              	.LASF33:
 3083 0163 56355F70 		.ascii	"V5_pp\000"
 3083      7000
 3084              	.LASF19:
 3085 0169 666C6F61 		.ascii	"float\000"
 3085      7400
 3086              	.LASF11:
 3087 016f 6C6F6E67 		.ascii	"long long int\000"
 3087      206C6F6E 
 3087      6720696E 
 3087      7400
 3088              	.LASF21:
 3089 017d 63686172 		.ascii	"char\000"
 3089      00
 3090              	.LASF25:
 3091 0182 70695F74 		.ascii	"pi_t\000"
 3091      00
 3092              	.LASF8:
 3093 0187 6C6F6E67 		.ascii	"long int\000"
 3093      20696E74 
 3093      00
 3094              	.LASF10:
 3095 0190 5F5F696E 		.ascii	"__int64_t\000"
 3095      7436345F 
 3095      7400
 3096              	.LASF40:
 3097 019a 755F7261 		.ascii	"u_raw\000"
 3097      7700
 3098              	.LASF1:
 3099 01a0 5F5F7569 		.ascii	"__uint8_t\000"
 3099      6E74385F 
 3099      7400
 3100              	.LASF3:
 3101 01aa 756E7369 		.ascii	"unsigned char\000"
 3101      676E6564 
 3101      20636861 
 3101      7200
 3102              	.LASF53:
 3103 01b8 73656E31 		.ascii	"sen1_on_line\000"
 3103      5F6F6E5F 
 3103      6C696E65 
 3103      00
 3104              	.LASF51:
 3105 01c5 66727569 		.ascii	"fruit_complete\000"
 3105      745F636F 
 3105      6D706C65 
 3105      746500
 3106              	.LASF26:
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 67


 3107 01d4 72617731 		.ascii	"raw1\000"
 3107      00
 3108              	.LASF22:
 3109 01d9 6C6F6E67 		.ascii	"long double\000"
 3109      20646F75 
 3109      626C6500 
 3110              	.LASF54:
 3111 01e5 73656E32 		.ascii	"sen2_on_line\000"
 3111      5F6F6E5F 
 3111      6C696E65 
 3111      00
 3112              	.LASF60:
 3113 01f2 675F7374 		.ascii	"g_stop_now\000"
 3113      6F705F6E 
 3113      6F7700
 3114              	.LASF64:
 3115 01fd 7475726E 		.ascii	"turn_cooldown_ticks\000"
 3115      5F636F6F 
 3115      6C646F77 
 3115      6E5F7469 
 3115      636B7300 
 3116              	.LASF55:
 3117 0211 73656E33 		.ascii	"sen3_on_line\000"
 3117      5F6F6E5F 
 3117      6C696E65 
 3117      00
 3118              	.LASF2:
 3119 021e 7369676E 		.ascii	"signed char\000"
 3119      65642063 
 3119      68617200 
 3120              	.LASF12:
 3121 022a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3121      206C6F6E 
 3121      6720756E 
 3121      7369676E 
 3121      65642069 
 3122              	.LASF56:
 3123 0241 73656E34 		.ascii	"sen4_on_line\000"
 3123      5F6F6E5F 
 3123      6C696E65 
 3123      00
 3124              	.LASF13:
 3125 024e 756E7369 		.ascii	"unsigned int\000"
 3125      676E6564 
 3125      20696E74 
 3125      00
 3126              	.LASF34:
 3127 025b 56365F70 		.ascii	"V6_pp\000"
 3127      7000
 3128              	.LASF16:
 3129 0261 75696E74 		.ascii	"uint16_t\000"
 3129      31365F74 
 3129      00
 3130              	.LASF57:
 3131 026a 73656E35 		.ascii	"sen5_on_line\000"
 3131      5F6F6E5F 
 3131      6C696E65 
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 68


 3131      00
 3132              	.LASF36:
 3133 0277 5F636C61 		.ascii	"_clampf\000"
 3133      6D706600 
 3134              	.LASF45:
 3135 027f 434D445F 		.ascii	"CMD_STATES\000"
 3135      53544154 
 3135      455300
 3136              	.LASF6:
 3137 028a 73686F72 		.ascii	"short unsigned int\000"
 3137      7420756E 
 3137      7369676E 
 3137      65642069 
 3137      6E7400
 3138              	.LASF58:
 3139 029d 73656E36 		.ascii	"sen6_on_line\000"
 3139      5F6F6E5F 
 3139      6C696E65 
 3139      00
 3140              	.LASF0:
 3141 02aa 5F5F696E 		.ascii	"__int8_t\000"
 3141      74385F74 
 3141      00
 3142              	.LASF68:
 3143 02b3 6973725F 		.ascii	"isr_qd_Handler\000"
 3143      71645F48 
 3143      616E646C 
 3143      657200
 3144              	.LASF44:
 3145 02c2 63656E74 		.ascii	"center_duty_est\000"
 3145      65725F64 
 3145      7574795F 
 3145      65737400 
 3146              	.LASF17:
 3147 02d2 696E7433 		.ascii	"int32_t\000"
 3147      325F7400 
 3148              	.LASF37:
 3149 02da 70695F73 		.ascii	"pi_step\000"
 3149      74657000 
 3150              	.LASF52:
 3151 02e2 73746565 		.ascii	"steer\000"
 3151      7200
 3152              	.LASF43:
 3153 02e8 5F426F6F 		.ascii	"_Bool\000"
 3153      6C00
 3154              	.LASF31:
 3155 02ee 646D6D5F 		.ascii	"dmm_signed\000"
 3155      7369676E 
 3155      656400
 3156              	.LASF62:
 3157 02f9 6469725F 		.ascii	"dir_delay_ticks\000"
 3157      64656C61 
 3157      795F7469 
 3157      636B7300 
 3158              	.LASF39:
 3159 0309 695F6E65 		.ascii	"i_next\000"
 3159      787400
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 69


 3160              	.LASF66:
 3161 0310 6D61696E 		.ascii	"main.c\000"
 3161      2E6300
 3162              	.LASF9:
 3163 0317 6C6F6E67 		.ascii	"long unsigned int\000"
 3163      20756E73 
 3163      69676E65 
 3163      6420696E 
 3163      7400
 3164              	.LASF29:
 3165 0329 64617667 		.ascii	"davg_sign\000"
 3165      5F736967 
 3165      6E00
 3166              	.LASF69:
 3167 0333 6C696768 		.ascii	"light_sensors_update_and_maybe_request_turn\000"
 3167      745F7365 
 3167      6E736F72 
 3167      735F7570 
 3167      64617465 
 3168              	.LASF41:
 3169 035f 7361745F 		.ascii	"sat_hi\000"
 3169      686900
 3170              	.LASF24:
 3171 0366 745F6C6F 		.ascii	"t_loss\000"
 3171      737300
 3172              	.LASF7:
 3173 036d 5F5F696E 		.ascii	"__int32_t\000"
 3173      7433325F 
 3173      7400
 3174              	.LASF35:
 3175 0377 6E6F726D 		.ascii	"norm01_from_pp\000"
 3175      30315F66 
 3175      726F6D5F 
 3175      707000
 3176              	.LASF59:
 3177 0386 675F6469 		.ascii	"g_direction\000"
 3177      72656374 
 3177      696F6E00 
 3178              	.LASF42:
 3179 0392 7361745F 		.ascii	"sat_lo\000"
 3179      6C6F00
 3180              	.LASF20:
 3181 0399 646F7562 		.ascii	"double\000"
 3181      6C6500
 3182              	.LASF61:
 3183 03a0 675F6469 		.ascii	"g_dist_mm\000"
 3183      73745F6D 
 3183      6D00
 3184              	.LASF71:
 3185 03aa 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3185      52784275 
 3185      66666572 
 3185      00
 3186              	.LASF47:
 3187 03b7 74617267 		.ascii	"target_dist\000"
 3187      65745F64 
 3187      69737400 
ARM GAS  C:\Users\yram171\AppData\Local\Temp\ccGEtsrx.s 			page 70


 3188              	.LASF28:
 3189 03c3 64617667 		.ascii	"davg_abs\000"
 3189      5F616273 
 3189      00
 3190              	.LASF50:
 3191 03cc 75547572 		.ascii	"uTurn_complete\000"
 3191      6E5F636F 
 3191      6D706C65 
 3191      746500
 3192              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
